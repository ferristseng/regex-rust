warning: no debug symbols in executable (-arch x86_64)
--Case 7--
--STACK--
&CharClass(state::CharClass{negate: false, ranges: ~[('1', '1'), ('-', '-')]})
--STACK--
&CharClass(state::CharClass{negate: false, ranges: ~[('1', '1'), ('-', '-')]})
&Literal(state::Literal{value: ~"]"})
--Case 8--
--STACK--
&Op(OpLeftParen)
&Literal(state::Literal{value: ~"a"})
--STACK--
&Op(OpLeftParen)
&Literal(state::Literal{value: ~"a"})
&Literal(state::Literal{value: ~"b"})
--STACK--
&Op(OpLeftParen)
&Literal(state::Literal{value: ~"a"})
&Literal(state::Literal{value: ~"b"})
&Literal(state::Literal{value: ~"c"})
--STACK--
&Expression(state::Regexp{op: OpCapture, state0: Some(~Literal(state::Literal{value: ~"abc"})), state1: None})
--STACK--
&Expression(state::Regexp{op: OpRepeatOp(1u, None), state0: Some(~Expression(state::Regexp{op: OpCapture, state0: Some(~Literal(state::Literal{value: ~"abc"})), state1: None})), state1: None})
--Case 9--
--STACK--
&Literal(state::Literal{value: ~"a"})
--STACK--
&Literal(state::Literal{value: ~"a"})
&Literal(state::Literal{value: ~"b"})
--STACK--
&Literal(state::Literal{value: ~"a"})
&Literal(state::Literal{value: ~"b"})
&Literal(state::Literal{value: ~"c"})
--STACK--
&Literal(state::Literal{value: ~"a"})
&Literal(state::Literal{value: ~"b"})
&Expression(state::Regexp{op: OpRepeatOp(3u, Some(4u)), state0: Some(~Literal(state::Literal{value: ~"c"})), state1: None})
--STACK--
&Literal(state::Literal{value: ~"a"})
&Literal(state::Literal{value: ~"b"})
&Expression(state::Regexp{op: OpRepeatOp(3u, Some(4u)), state0: Some(~Literal(state::Literal{value: ~"c"})), state1: None})
--Case 10--
--STACK--
&Literal(state::Literal{value: ~"a"})
--STACK--
&Literal(state::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(state::Literal{value: ~"b"})
--STACK--
&Literal(state::Literal{value: ~"a"})
&Op(OpAlternation)
&Expression(state::Regexp{op: OpRepeatOp(3u, Some(3u)), state0: Some(~Literal(state::Literal{value: ~"b"})), state1: None})
--STACK--
&Expression(state::Regexp{op: OpAlternation, state0: Some(~Literal(state::Literal{value: ~"a"})), state1: Some(~Expression(state::Regexp{op: OpRepeatOp(3u, Some(3u)), state0: Some(~Literal(state::Literal{value: ~"b"})), state1: None}))})
--Case 11--
--STACK--
&Literal(state::Literal{value: ~"a"})
Parse Error: Repeat range is empty
--Case 12--
--STACK--
&CharClass(state::CharClass{negate: false, ranges: ~[('A', 'Z')]})
Starting recursive compilation...
--COMPILE STACK--
0: InstRange A-Z
pushing instmatch
--COMPILE STACK--
0: InstRange A-Z
1: InstMatch
