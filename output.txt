warning: no debug symbols in executable (-arch x86_64)
--Case 1--
--STACK--
&CharClass(parse::CharClass{negate: false, ranges: ~[('a', 's'), ('0', '9'), ('w', 'z')]})
--STACK--
&CharClass(parse::CharClass{negate: false, ranges: ~[('a', 's'), ('0', '9'), ('w', 'z')]})
&Op(OpAlternation)
&CharClass(parse::CharClass{negate: false, ranges: ~[('T', 'Z'), ('w', 'w')]})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~CharClass(parse::CharClass{negate: false, ranges: ~[('a', 's'), ('0', '9'), ('w', 'z')]})), state1: Some(~CharClass(parse::CharClass{negate: false, ranges: ~[('T', 'Z'), ('w', 'w')]}))})
--Case 2--
--STACK--
&Literal(parse::Literal{value: ~"a"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"b"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"b"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"c"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"b"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"a"})), state1: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"b"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))}))})
--Case 3--
--STACK--
&Literal(parse::Literal{value: ~"a"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"B"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"B"})
&Literal(parse::Literal{value: ~"c"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"B"})
&Literal(parse::Literal{value: ~"c"})
&Literal(parse::Literal{value: ~"f"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"Bcf"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"d"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"Bcf"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"d"})
&Literal(parse::Literal{value: ~"e"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"Bcf"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"d"})
&Literal(parse::Literal{value: ~"e"})
&Literal(parse::Literal{value: ~"z"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Op(OpAlternation)
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"Bcf"})), state1: Some(~Literal(parse::Literal{value: ~"dez"}))})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"a"})), state1: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"Bcf"})), state1: Some(~Literal(parse::Literal{value: ~"dez"}))}))})
--Case 4--
--STACK--
&Literal(parse::Literal{value: ~"a"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Literal(parse::Literal{value: ~"b"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Literal(parse::Literal{value: ~"b"})
&Literal(parse::Literal{value: ~"c"})
--STACK--
&Literal(parse::Literal{value: ~"a"})
&Literal(parse::Literal{value: ~"b"})
&Expression(parse::Regexp{op: OpKleine, state0: Some(~Literal(parse::Literal{value: ~"c"})), state1: None})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"a"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"b"})), state1: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Literal(parse::Literal{value: ~"c"})), state1: None}))}))})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"d"})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"a"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"b"})), state1: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Literal(parse::Literal{value: ~"c"})), state1: None}))}))})), state1: Some(~Literal(parse::Literal{value: ~"d"}))})
--Case 5--
--STACK--
&Literal(parse::Literal{value: ~"i"})
--STACK--
&Literal(parse::Literal{value: ~"i"})
&Literal(parse::Literal{value: ~"o"})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"a"})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"a"})
&Literal(parse::Literal{value: ~"b"})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"ab"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"c"})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})
&Literal(parse::Literal{value: ~"z"})
--STACK--
&Literal(parse::Literal{value: ~"io"})
&Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})
&Literal(parse::Literal{value: ~"z"})
&Literal(parse::Literal{value: ~"z"})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"io"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})), state1: Some(~Literal(parse::Literal{value: ~"zz"}))}))})
&Op(OpAlternation)
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"b"})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"io"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})), state1: Some(~Literal(parse::Literal{value: ~"zz"}))}))})
&Op(OpAlternation)
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"b"})
&Literal(parse::Literal{value: ~"c"})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"io"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})), state1: Some(~Literal(parse::Literal{value: ~"zz"}))}))})
&Op(OpAlternation)
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"b"})
&Literal(parse::Literal{value: ~"c"})
&Literal(parse::Literal{value: ~"d"})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"io"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})), state1: Some(~Literal(parse::Literal{value: ~"zz"}))}))})
&Op(OpAlternation)
&Expression(parse::Regexp{op: OpCapture, state0: Some(~Literal(parse::Literal{value: ~"bcd"})), state1: None})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"io"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})), state1: Some(~Literal(parse::Literal{value: ~"zz"}))}))})
&Op(OpAlternation)
&Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Literal(parse::Literal{value: ~"bcd"})), state1: None})), state1: None})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"io"})), state1: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Literal(parse::Literal{value: ~"c"}))})), state1: None})), state1: None})), state1: Some(~Literal(parse::Literal{value: ~"zz"}))}))})), state1: Some(~Expression(parse::Regexp{op: OpKleine, state0: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Literal(parse::Literal{value: ~"bcd"})), state1: None})), state1: None}))})
--Case 6--
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"a"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"a"})
&Literal(parse::Literal{value: ~"b"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"ab"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"c"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"ab"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"c"})
&Literal(parse::Literal{value: ~"d"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"ab"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"cd"})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"d"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Literal(parse::Literal{value: ~"ab"})
&Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"cd"})), state1: Some(~Literal(parse::Literal{value: ~"d"}))})), state1: None})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Op(OpLeftParen)
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"cd"})), state1: Some(~Literal(parse::Literal{value: ~"d"}))})), state1: None}))})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"e"})
--STACK--
&Literal(parse::Literal{value: ~"\u3042"})
&Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"cd"})), state1: Some(~Literal(parse::Literal{value: ~"d"}))})), state1: None}))})), state1: Some(~Literal(parse::Literal{value: ~"e"}))})), state1: None})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"\u3042"})), state1: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"cd"})), state1: Some(~Literal(parse::Literal{value: ~"d"}))})), state1: None}))})), state1: Some(~Literal(parse::Literal{value: ~"e"}))})), state1: None}))})
&Op(OpAlternation)
&Literal(parse::Literal{value: ~"f"})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"\u3042"})), state1: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~Literal(parse::Literal{value: ~"ab"})), state1: Some(~Expression(parse::Regexp{op: OpCapture, state0: Some(~Expression(parse::Regexp{op: OpAlternation, state0: Some(~Literal(parse::Literal{value: ~"cd"})), state1: Some(~Literal(parse::Literal{value: ~"d"}))})), state1: None}))})), state1: Some(~Literal(parse::Literal{value: ~"e"}))})), state1: None}))})), state1: Some(~Literal(parse::Literal{value: ~"f"}))})
--Case 7--
--STACK--
&CharClass(parse::CharClass{negate: false, ranges: ~[('A', 'Z'), ('0', '9'), ('(', '('), ('f', 'f'), ('g', 'g'), ('h', 'h'), (')', ')')]})
--STACK--
&CharClass(parse::CharClass{negate: false, ranges: ~[('A', 'Z'), ('0', '9'), ('(', '('), ('f', 'f'), ('g', 'g'), ('h', 'h'), (')', ')')]})
&Literal(parse::Literal{value: ~"]"})
--STACK--
&CharClass(parse::CharClass{negate: false, ranges: ~[('A', 'Z'), ('0', '9'), ('(', '('), ('f', 'f'), ('g', 'g'), ('h', 'h'), (')', ')')]})
&Literal(parse::Literal{value: ~"]"})
&Literal(parse::Literal{value: ~"]"})
--STACK--
&Expression(parse::Regexp{op: OpConcatenation, state0: Some(~CharClass(parse::CharClass{negate: false, ranges: ~[('A', 'Z'), ('0', '9'), ('(', '('), ('f', 'f'), ('g', 'g'), ('h', 'h'), (')', ')')]})), state1: Some(~Literal(parse::Literal{value: ~"]]"}))})
&Op(OpAlternation)
&CharClass(parse::CharClass{negate: false, ranges: ~[('a', 'a'), ('b', 'b'), ('c', 'c')]})
--STACK--
&Expression(parse::Regexp{op: OpAlternation, state0: Some(~Expression(parse::Regexp{op: OpConcatenation, state0: Some(~CharClass(parse::CharClass{negate: false, ranges: ~[('A', 'Z'), ('0', '9'), ('(', '('), ('f', 'f'), ('g', 'g'), ('h', 'h'), (')', ')')]})), state1: Some(~Literal(parse::Literal{value: ~"]]"}))})), state1: Some(~CharClass(parse::CharClass{negate: false, ranges: ~[('a', 'a'), ('b', 'b'), ('c', 'c')]}))})
