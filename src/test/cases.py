# -*- coding: utf-8 -*-

# Add cases below
# These are used to generated a file of unit tests
# in Rust
#
# As of writing this, there's no way of using the #[test]
# attribute in a macro (Rust 0.8), so I'm doing it this way.

MATCH = 1
NOMATCH = 0
PARSEERR = -1

# These are the tests we generate functions for
# (re, input, matched_str, expected, ..[groups])
TESTS = [
  # 0
  ("[^^]+", "abc", "abc", MATCH),
  ("[^^]+", "^", "", NOMATCH),
  ("[^al-obc]+", "kpd", "kpd",  MATCH),
  ("[^al-obc]+", "abc", "", NOMATCH),
  ("[al-obc]+", "almocb", "almocb", MATCH),
  ("[al-obc]+", "defzx", "", NOMATCH),
  ("a(?:b|c|d)(.)", "ace", "ace", MATCH, ["e"]),
  ("a(?:b|c|d)*(.)", "ace", "ace", MATCH, ["e"]),
  ("a(?:b|c|d)+?(.)", "ace", "ace", MATCH, ["e"]),
  ("[-+]?[0-9]*\\.?[0-9]+", "3.14", "3.14", MATCH),
  ("<TAG\\b[^>]*>(.*?)</TAG>", "one<TAG>two</TAG>three", "<TAG>two</TAG>", MATCH, ["two"]),
  # These tests cause the compiler to fail (See https://github.com/mozilla/rust/issues/4780)
  #("①②③", "①②③", "①②③", MATCH),
  #("①②③", "①②③④⑤", "①②③", MATCH),
  #("①(②)③", "①②③", "①②③", MATCH, ["②"]),
  #("[①②③]*", "①②③", "①②③", MATCH),
  #("[^④⑤]*", "①②③", "①②③", MATCH),
  #--
  # INSERT SKIPPED TESTS HERE
  #--
  (")", "", "", PARSEERR),
  ("", "", "", MATCH),
  ("abc", "abc", "abc", MATCH),
  ("abc", "xbc", "", NOMATCH),
  ("abc", "axc", "", NOMATCH),
  ("abc", "xabcy", "abc", MATCH),
  ("abc", "ababc", "abc", MATCH),
  ("ab*c", "abc", "abc", MATCH),
  ("ab*bc", "abbc", "abbc", MATCH),
  ("ab*bc", "abbbbc", "abbbbc", MATCH),
  ("ab{0,}bc", "abbbbc", "abbbbc", MATCH),
  ("ab+bc", "abbc", "abbc", MATCH),
  ("ab+bc", "abc", "", NOMATCH),
  ("ab+bc", "abq", "", NOMATCH),
  ("ab{1,}bc", "abq", "", NOMATCH),
  ("ab+bc", "abbbbc", "abbbbc", MATCH),
  ("ab{1,}bc", "abbbbc", "abbbbc", MATCH),
  ("ab{1,3}bc", "abbbbc", "abbbbc", MATCH),
  ("ab{3,4}bc", "abbbbc", "abbbbc", MATCH),
  ("ab{4,5}bc", "abbbbc", "abbbbc", NOMATCH),
  ("ab?bc", "abbc", "abbc", MATCH),
  ("ab?bc", "abc", "abc", MATCH),
  ("ab{0,1}bc", "abc", "abc", MATCH),
  ("ab?bc", "abbbbc", "", NOMATCH),
  ("ab?c", "abc", "abc", MATCH),
  ("ab{0,1}c", "abc", "abc", MATCH),
  ("^abc$", "abc", "abc", MATCH),
  ("^abc$", "abcc", "", NOMATCH),
  ("^abc", "abcc", "abc", MATCH),
  ("^abc$", "aabc", "", NOMATCH),
  ("abc$", "abcc", "", NOMATCH),
  ("^", "abc", "", MATCH),
  ("$", "abc", "", MATCH),
  ("a.c", "abc", "abc", MATCH),
  ("a.c", "axc", "axc", MATCH),
  ("a.*c", "axyzc", "axyzc", MATCH),
  ("a.*c", "axyzd", "", NOMATCH),
  ("a[bc]d", "abc", "", NOMATCH),
  ("a[bc]d", "abd", "abd", MATCH),
  ("a[b-d]e", "abd", "", NOMATCH),
  ("a[b-d]e", "ace", "ace", MATCH),
  ("a[b-d]", "aac", "ac", MATCH),
  ("a[-b]", "a-", "a-", MATCH),
  ("a[\\-b]", "a-", "a-", MATCH),
  ("a[]b", "-", "", PARSEERR),
  ("a[", "-", "", PARSEERR),
  ("a\\", "-", "", PARSEERR),
  ("abc)", "-", "", PARSEERR),
  ("(abc", "-", "", PARSEERR),
  ("a]", "a]", "a]", MATCH),
  ("a[]]b", "a]b", "a]b", MATCH),
  ("a[\\]]b", "a]b", "a]b", MATCH),
  ("a[^bc]d", "aed", "aed", MATCH),
  ("a[^bc]d", "abd", "", NOMATCH),
  ("a[^-b]c", "adc", "adc", MATCH),
  ("a[^-b]c", "a-c", "", NOMATCH),
  ("a[^]b]c", "a]c", "", NOMATCH),
  ("a[^]b]c", "adc", "adc", MATCH),
  ("\\ba\\b", "a-", "a", MATCH),
  ("\\ba\\b", "-a", "a", MATCH),
  ("\\ba\\b", "-a-", "a", MATCH),
  ("\\by\\b", "xy", "", NOMATCH),
  ("\\by\\b", "yz", "", NOMATCH),
  ("\\by\\b", "xyz", "", NOMATCH),
  ("x\\b", "xyz", "", NOMATCH),
  ("x\\B", "xyz", "x", MATCH),
  ("\\Ba\\B", "a-", "", NOMATCH),
  ("\\Ba\\B", "-a", "", NOMATCH),
  ("\\Ba\\B", "-a-", "", NOMATCH),
  ("\\By\\B", "xy", "", NOMATCH),
  ("\\By\\B", "yz", "", NOMATCH),
  ("\\By\\b", "xy", "y", MATCH),
  ("\\by\\B", "yz", "y", MATCH),
  ("\\By\\B", "xyz", "y", MATCH),
  ("ab|cd", "abc", "ab", MATCH),
  ("ab|cd", "abcd", "ab", MATCH),
  ("()ef", "def", "ef", MATCH, [""]), # Check this
  ("$b", "b", "", NOMATCH),
  ("a\\(b", "a(b", "a(b", MATCH),
  ("a\\(*b", "ab", "ab", MATCH),
  ("a\\(*b", "a((b", "a((b", MATCH),
  ("a\\\\b", "a\\\\b", "a\\\\b", MATCH),
  ("((a))", "abc", "a", MATCH, ["a", "a"]),
  ("(a)b(c)", "abc", "abc", MATCH, ["a", "c"]),
  ("a+b+c", "aabbabc", "abc", MATCH),
  ("(a+|b)*", "ab", "ab", MATCH, ["b"]),
  ("(a+|b)+", "ab", "ab", MATCH, ["b"]),
  ("(a+|b)?", "ab", "a", MATCH, ["a"]),
  (")(", "-", "", PARSEERR),
  ("[^ab]*", "cde", "cde", MATCH),
  ("abc", "", "", NOMATCH),
  ("a*", "", "", MATCH),
  ("a|b|c|d|e", "e", "e", MATCH),
  ("(a|b|c|d|e)f", "ef", "ef", MATCH, ["e"]),
  ("abcd*efg", "abcdefg", "abcdefg", MATCH),
  ("ab*", "xabyabbbz", "ab", MATCH),
  ("ab*", "xayabbbz", "a", MATCH),
  ("(ab|cd)e", "abcde", "cde", MATCH, ["cd"]),
  ("[abhgefdc]ij", "hij", "hij", MATCH),
  ("^(ab|cd)e", "abcde", "", NOMATCH),
  ("(abc|)ef", "abcdef", "ef", MATCH, [""]), # Check this
  ("(a|b)c*d", "abcd", "bcd", MATCH, ["b"]),
  ("(ab|ab*)bc", "abc", "abc", MATCH, ["a"]),
  ("a([bc]*)c*", "abc", "abc", MATCH, ["bc"]),
  ("a([bc]*)(c*d)", "abcd", "abcd", MATCH, ["bc", "d"]),
  ("a([bc]+)(c*d)", "abcd", "abcd", MATCH, ["bc", "d"]),
  ("a([bc]*)(c+d)", "abcd", "abcd", MATCH, ["b", "cd"]),
  ("a[bcd]*dcdcde", "adcdcde", "adcdcde", MATCH),
  ("a[bcd]+dcdcde", "adcdcde", "", NOMATCH),
  ("(ab|a)b*c", "abc", "abc", MATCH, ["ab"]),
  ("((a)(b)c)(d)", "abcd", "abcd", MATCH, ["abc", "a", "b", "d"]),
  ("[a-zA-Z_][a-zA-Z0-9_]*", "alpha", "alpha", MATCH),
  ("^a(bc+|b[eh])g|.h$", "abh", "bh", MATCH, [""]),
  ("(bc+d$|ef*g.|h?i(j|k))", "effgz", "effgz", MATCH, ["effgz", ""]),
  ("(bc+d$|ef*g.|h?i(j|k))", "ij", "ij", MATCH, ["ij", "j"]),
  ("(bc+d$|ef*g.|h?i(j|k))", "effg", "", NOMATCH),
  ("(bc+d$|ef*g.|h?i(j|k))", "bcdd", "", NOMATCH),
  ("(bc+d$|ef*g.|h?i(j|k))", "reffgz", "effgz", MATCH, ["effgz", ""]),
  ("(((((((((a)))))))))", "a", "a", MATCH, ["a", "a", "a", "a", "a", "a", "a", "a", "a"]),
  ("multiple words of text", "uh-uh", "", NOMATCH),
  ("multiple words", "multiple words, yeah", "multiple words", MATCH),
  ("(.*)c(.*)", "abcde", "abcde", MATCH, ["ab", "de"]),
  ("\\((.*), (.*)\\)", "(a, b)", "(a, b)", MATCH, ["a", "b"]),
  ("[k]", "ab", "", NOMATCH),
  ("a[-]?c", "ac", "ac", MATCH),
  #("(abc)\\1", "abcabc", "abcabc", MATCH),
  #("([a-c]*)\\1", "abcabc", "abcabc", MATCH),
  ("^(.+)?B", "AB", "AB", MATCH, ["A"]),
  #("(a+).\\1$", "aaaaa", "aaaaa", MATCH),
  #("^(a+).\\1$", "aaaa", "", NOMATCH),
  #--
  # Custom Tests
  #--
  ("a{5}", "aaaaa", "aaaaa", MATCH),
  ("a{5,}", "aaaaaaa", "aaaaaaa", MATCH),
  ("a{5,7}", "aaaaaa", "aaaaaa", MATCH),
  ("a{5,}", "aaaa", "", NOMATCH),

  # Nested character class tests
  ("[a-e[g]]", "d]", "d]", MATCH),
  ("[a-e[g]]", "g]", "g]", MATCH),
  ("[a-e[g]]", "[]", "[]", MATCH),
  ("[a-e[g]]", "]]", "]]", NOMATCH),
  ("[[g-p][a-d]]", "[c]", "[c]", MATCH),
  ("[(a-d)]", "c", "c", MATCH),
  ("[(a-d)]", "(", "(", MATCH),

  # Unicode character class tests
  ("\\p{Nd}", '\u06f0', '\u06f0', MATCH),
  ("\\p{Nd}", "\U000104af", "", NOMATCH),
  ("\\P{Nd}", "\U000104af", "\U000104af", MATCH),
  ("\\P{Nd}", "\u06f0", "", NOMATCH),
  ("\\p{Greek}", "\U00010181", "\U00010181", MATCH),
  ("\\p{Greek}", "\u0374", "", NOMATCH),
  ("\\P{Greek}", "\U00010181", "", NOMATCH),
  ("\\P{Greek}", "\u0374", "\u0374", MATCH)
]
