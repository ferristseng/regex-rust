# Test generator

import re
from cases import * 
from datetime import datetime

FILE = open('src/re/test.rs', 'w')

OUTPUT = """
// This is an auto-generated test file
// Generated by src/test/test_generator.py
//
// Last Modified: %s

macro_rules! run_tests(
  ($re: expr, $input: expr, $matched: expr, $ident: expr, 
   $expect: pat, $groups: expr) => (
    {
      let mut re = UncompiledRegexp::new($re);
      let res = re.search($input);
      let expect_test = match res {
        $expect => true, 
        _ => {
          println(format!("Failed with test {:s}: <Re: '{:s}'> | <Input: '{:s}'>", 
                  $ident, $re, $input));
          false
        }
      };
      if (!expect_test) {
        assert!(expect_test);
        return
      }
      if (res.is_ok()) {
        match res.unwrap() {
          Some(ma) => {
            assert_eq!(ma.matched(), $matched)
            
            let groups: &'static[&'static str] = $groups;
            let mut i = 0;

            for g in groups.iter() {
              assert_eq!(ma.group(i), g.to_str());

              i += 1;
            }
          }
          _ => { }
        }
      }
    }
  )
)

#[cfg(test)]
mod python_tests {
  use regexp::UncompiledRegexp;

  // Tests start here
  %s
}
"""

TEST_FN = """
  #[test]
  fn test_case_ident_%s() {
    run_tests!(\"%s\", \"%s\", ~\"%s\", \"%s\", %s, &'static [%s])
  }
"""

def generate_test_num(num, digits):
  ret = str(num)
  for i in range(0, digits - len(ret)):
    ret = "0" + ret
  return ret

def generate_test_case(ident, regexp, input_str, 
    matched_str, expected, groups):
  if expected == NOMATCH:
    match = "Ok(None)"
  elif expected == PARSEERR:
    match = "Err(_)"
  elif expected == MATCH:
    match = "Ok(Some(_))"

  regexp = re.sub("\\\\", "\\\\\\\\", regexp)
  input_str = re.sub("\\\\", "\\\\\\\\", input_str)
  matched_str = re.sub("\\\\", "\\\\\\\\", matched_str)

  if (len(groups) > 0):
    groups_str  = "\"" + "\", \"".join(groups) + "\""
  else:
    groups_str = ""

  return TEST_FN % (ident, regexp, input_str, matched_str, ident, 
      match, groups_str)

if __name__ == "__main__":
  date = datetime.today().strftime("%B %d %Y %I:%M%p")
  buf = ""

  for (i, test) in enumerate(TESTS):
    ident = generate_test_num(i, len(str(len(TESTS))))
    if (len(test) == 5):
      groups = test[4]
    else:
      groups = []
    buf += \
      generate_test_case(ident, test[0], test[1], test[2], test[3], 
                         groups)

  FILE.write(OUTPUT % (date, buf))

  print("Successfully generated test file: src/re/test.rs")
