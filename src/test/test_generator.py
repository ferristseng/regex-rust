# Test generator

import re
from cases import TESTS
from datetime import datetime

FILE = open('src/re/test.rs', 'w')

OUTPUT = """
// This is an auto-generated test file
// Generated by src/test/test_generator.py
//
// Last Modified: %s

macro_rules! run_tests(
  ($re: expr, $input: expr, $matched: expr, $expect: pat) => (
    {
      let mut re = UncompiledRegexp::new($re);
      let res = re.search($input);
      let expect_test = match res {
        $expect => true, 
        _ => false
      };
      if (!expect_test) {
        assert!(expect_test);
        return
      }
      if (res.is_some()) {
        assert!(res.unwrap().matched() == $matched)
      }
    }
  )
)

#[cfg(test)]
mod python_tests {
  use regexp::UncompiledRegexp;

  // Tests start here
  %s
}
"""

TEST_FN = """
  #[test]
  fn test_case_ident_%s() {
    run_tests!(\"%s\", \"%s\", ~\"%s\", %s)
  }
"""

def generate_test_num(num, digits):
  ret = str(num)
  for i in range(0, digits - len(ret)):
    ret = "0" + ret
  return ret

def generate_test_case(ident, regexp, input_str, 
    matched_str, expected):
  match = "Some(_)" if expected == 1 else "None"
  regexp = re.sub("\\\\", "\\\\\\\\", regexp)
  return TEST_FN % (ident, regexp, input_str, matched_str, match)

if __name__ == "__main__":
  date = datetime.today().strftime("%B %d %Y %I:%M%p")
  buf = ""

  for (i, test) in enumerate(TESTS):
    ident = generate_test_num(i, len(str(len(TESTS))))
    buf += \
      generate_test_case(ident, test[0], test[1], test[2], test[3])

  FILE.write(OUTPUT % (date, buf))

  print("Successfully generated test file: src/re/test.rs")
