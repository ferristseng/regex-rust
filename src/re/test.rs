
// This is an auto-generated test file
// Generated by src/test/test_generator.py
//
// Last Modified: December 19 2013 02:25AM

macro_rules! run_tests(
  ($re: expr, $input: expr, $matched: expr, $expect: pat) => (
    {
      let mut re = UncompiledRegexp::new($re);
      let res = re.search($input);
      let expect_test = match res {
        $expect => true, 
        _ => false
      };
      if (!expect_test) {
        assert!(expect_test);
        return
      }
      if (res.is_some()) {
        assert!(res.unwrap().matched() == $matched)
      }
    }
  )
)

#[cfg(test)]
mod python_tests {
  use regexp::UncompiledRegexp;

  // Tests start here
  
  #[test]
  fn test_case_ident_00() {
    run_tests!("[^^]+", "abc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_01() {
    run_tests!("[^^]+", "^", ~"", None)
  }

  #[test]
  fn test_case_ident_02() {
    run_tests!("[^al-obc]+", "kpd", ~"kpd", Some(_))
  }

  #[test]
  fn test_case_ident_03() {
    run_tests!("[^al-obc]+", "abc", ~"", None)
  }

  #[test]
  fn test_case_ident_04() {
    run_tests!("[al-obc]+", "almocb", ~"almocb", Some(_))
  }

  #[test]
  fn test_case_ident_05() {
    run_tests!("[al-obc]+", "defzx", ~"", None)
  }

  #[test]
  fn test_case_ident_06() {
    run_tests!("a(?:b|c|d)(.)", "ace", ~"ace", Some(_))
  }

  #[test]
  fn test_case_ident_07() {
    run_tests!("a(?:b|c|d)*(.)", "ace", ~"ace", Some(_))
  }

  #[test]
  fn test_case_ident_08() {
    run_tests!("a(?:b|c|d)+?(.)", "ace", ~"ace", Some(_))
  }

  #[test]
  fn test_case_ident_09() {
    run_tests!("[-+]?[0-9]*\\.?[0-9]+", "3.14", ~"3.14", Some(_))
  }

  #[test]
  fn test_case_ident_10() {
    run_tests!("abc", "abc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_11() {
    run_tests!("abc", "xbc", ~"", None)
  }

  #[test]
  fn test_case_ident_12() {
    run_tests!("abc", "axc", ~"", None)
  }

  #[test]
  fn test_case_ident_13() {
    run_tests!("abc", "xabcy", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_14() {
    run_tests!("abc", "ababc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_15() {
    run_tests!("ab*c", "abc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_16() {
    run_tests!("ab*bc", "abbc", ~"abbc", Some(_))
  }

  #[test]
  fn test_case_ident_17() {
    run_tests!("ab*bc", "abbbbc", ~"abbbbc", Some(_))
  }

  #[test]
  fn test_case_ident_18() {
    run_tests!("ab{0,}bc", "abbbbc", ~"abbbbc", Some(_))
  }

  #[test]
  fn test_case_ident_19() {
    run_tests!("ab+bc", "abbc", ~"abbc", Some(_))
  }

  #[test]
  fn test_case_ident_20() {
    run_tests!("ab+bc", "abc", ~"", None)
  }

  #[test]
  fn test_case_ident_21() {
    run_tests!("ab+bc", "abq", ~"", None)
  }

  #[test]
  fn test_case_ident_22() {
    run_tests!("ab{1,}bc", "abq", ~"", None)
  }

  #[test]
  fn test_case_ident_23() {
    run_tests!("ab+bc", "abbbbc", ~"abbbbc", Some(_))
  }

  #[test]
  fn test_case_ident_24() {
    run_tests!("ab{1,}bc", "abbbbc", ~"abbbbc", Some(_))
  }

  #[test]
  fn test_case_ident_25() {
    run_tests!("ab{1,3}bc", "abbbbc", ~"abbbbc", Some(_))
  }

  #[test]
  fn test_case_ident_26() {
    run_tests!("ab{3,4}bc", "abbbbc", ~"abbbbc", Some(_))
  }

  #[test]
  fn test_case_ident_27() {
    run_tests!("ab{4,5}bc", "abbbbc", ~"abbbbc", None)
  }

  #[test]
  fn test_case_ident_28() {
    run_tests!("ab?bc", "abbc", ~"abbc", Some(_))
  }

  #[test]
  fn test_case_ident_29() {
    run_tests!("ab?bc", "abc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_30() {
    run_tests!("ab{0,1}bc", "abc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_31() {
    run_tests!("ab?bc", "abbbbc", ~"", None)
  }

  #[test]
  fn test_case_ident_32() {
    run_tests!("ab?c", "abc", ~"abc", Some(_))
  }

  #[test]
  fn test_case_ident_33() {
    run_tests!("a{5}", "aaaaa", ~"aaaaa", Some(_))
  }

  #[test]
  fn test_case_ident_34() {
    run_tests!("a{5,}", "aaaaaaa", ~"aaaaaaa", Some(_))
  }

  #[test]
  fn test_case_ident_35() {
    run_tests!("a{5,7}", "aaaaaa", ~"aaaaaa", Some(_))
  }

  #[test]
  fn test_case_ident_36() {
    run_tests!("a{5,}", "aaaa", ~"", None)
  }

}
