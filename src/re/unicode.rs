// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT
// file at the top-level directory of this distribution and at
// http://rust-lang.org/COPYRIGHT.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// The following code was generated by "src/unicode/unicode.py"

#[allow(missing_doc)];
#[allow(non_uppercase_statics)];


fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {
    use cmp::{Equal, Less, Greater};
    use slice::ImmutableVector;
    use option::None;
    r.bsearch(|&(lo,hi)| {
        if lo <= c && c <= hi { Equal }
        else if hi < c { Less }
        else { Greater }
    }) != None
}


pub mod script {
    static Arabic_table : &'static [(char,char)] = &[
        ('\u0600', '\u0604'), ('\u0606', '\u0608'),
        ('\u0609', '\u060a'), ('\u060b', '\u060b'),
        ('\u060d', '\u060d'), ('\u060e', '\u060f'),
        ('\u0610', '\u061a'), ('\u061c', '\u061c'),
        ('\u061e', '\u061e'), ('\u0620', '\u063f'),
        ('\u0641', '\u064a'), ('\u0656', '\u065f'),
        ('\u066a', '\u066d'), ('\u066e', '\u066f'),
        ('\u0671', '\u06d3'), ('\u06d4', '\u06d4'),
        ('\u06d5', '\u06d5'), ('\u06d6', '\u06dc'),
        ('\u06de', '\u06de'), ('\u06df', '\u06e4'),
        ('\u06e5', '\u06e6'), ('\u06e7', '\u06e8'),
        ('\u06e9', '\u06e9'), ('\u06ea', '\u06ed'),
        ('\u06ee', '\u06ef'), ('\u06f0', '\u06f9'),
        ('\u06fa', '\u06fc'), ('\u06fd', '\u06fe'),
        ('\u06ff', '\u06ff'), ('\u0750', '\u077f'),
        ('\u08a0', '\u08a0'), ('\u08a2', '\u08ac'),
        ('\u08e4', '\u08fe'), ('\ufb50', '\ufbb1'),
        ('\ufbb2', '\ufbc1'), ('\ufbd3', '\ufd3d'),
        ('\ufd50', '\ufd8f'), ('\ufd92', '\ufdc7'),
        ('\ufdf0', '\ufdfb'), ('\ufdfc', '\ufdfc'),
        ('\ufe70', '\ufe74'), ('\ufe76', '\ufefc'),
        ('\U00010e60', '\U00010e7e'), ('\U0001ee00', '\U0001ee03'),
        ('\U0001ee05', '\U0001ee1f'), ('\U0001ee21', '\U0001ee22'),
        ('\U0001ee24', '\U0001ee24'), ('\U0001ee27', '\U0001ee27'),
        ('\U0001ee29', '\U0001ee32'), ('\U0001ee34', '\U0001ee37'),
        ('\U0001ee39', '\U0001ee39'), ('\U0001ee3b', '\U0001ee3b'),
        ('\U0001ee42', '\U0001ee42'), ('\U0001ee47', '\U0001ee47'),
        ('\U0001ee49', '\U0001ee49'), ('\U0001ee4b', '\U0001ee4b'),
        ('\U0001ee4d', '\U0001ee4f'), ('\U0001ee51', '\U0001ee52'),
        ('\U0001ee54', '\U0001ee54'), ('\U0001ee57', '\U0001ee57'),
        ('\U0001ee59', '\U0001ee59'), ('\U0001ee5b', '\U0001ee5b'),
        ('\U0001ee5d', '\U0001ee5d'), ('\U0001ee5f', '\U0001ee5f'),
        ('\U0001ee61', '\U0001ee62'), ('\U0001ee64', '\U0001ee64'),
        ('\U0001ee67', '\U0001ee6a'), ('\U0001ee6c', '\U0001ee72'),
        ('\U0001ee74', '\U0001ee77'), ('\U0001ee79', '\U0001ee7c'),
        ('\U0001ee7e', '\U0001ee7e'), ('\U0001ee80', '\U0001ee89'),
        ('\U0001ee8b', '\U0001ee9b'), ('\U0001eea1', '\U0001eea3'),
        ('\U0001eea5', '\U0001eea9'), ('\U0001eeab', '\U0001eebb'),
        ('\U0001eef0', '\U0001eef1')
    ];

    pub fn Arabic(c: char) -> bool {
        super::bsearch_range_table(c, Arabic_table)
    }

    static Armenian_table : &'static [(char,char)] = &[
        ('\u0531', '\u0556'), ('\u0559', '\u0559'),
        ('\u055a', '\u055f'), ('\u0561', '\u0587'),
        ('\u058a', '\u058a'), ('\u058f', '\u058f'),
        ('\ufb13', '\ufb17')
    ];

    pub fn Armenian(c: char) -> bool {
        super::bsearch_range_table(c, Armenian_table)
    }

    static Balinese_table : &'static [(char,char)] = &[
        ('\u1b00', '\u1b03'), ('\u1b04', '\u1b04'),
        ('\u1b05', '\u1b33'), ('\u1b34', '\u1b34'),
        ('\u1b35', '\u1b35'), ('\u1b36', '\u1b3a'),
        ('\u1b3b', '\u1b3b'), ('\u1b3c', '\u1b3c'),
        ('\u1b3d', '\u1b41'), ('\u1b42', '\u1b42'),
        ('\u1b43', '\u1b44'), ('\u1b45', '\u1b4b'),
        ('\u1b50', '\u1b59'), ('\u1b5a', '\u1b60'),
        ('\u1b61', '\u1b6a'), ('\u1b6b', '\u1b73'),
        ('\u1b74', '\u1b7c')
    ];

    pub fn Balinese(c: char) -> bool {
        super::bsearch_range_table(c, Balinese_table)
    }

    static Bengali_table : &'static [(char,char)] = &[
        ('\u0981', '\u0981'), ('\u0982', '\u0983'),
        ('\u0985', '\u098c'), ('\u098f', '\u0990'),
        ('\u0993', '\u09a8'), ('\u09aa', '\u09b0'),
        ('\u09b2', '\u09b2'), ('\u09b6', '\u09b9'),
        ('\u09bc', '\u09bc'), ('\u09bd', '\u09bd'),
        ('\u09be', '\u09c0'), ('\u09c1', '\u09c4'),
        ('\u09c7', '\u09c8'), ('\u09cb', '\u09cc'),
        ('\u09cd', '\u09cd'), ('\u09ce', '\u09ce'),
        ('\u09d7', '\u09d7'), ('\u09dc', '\u09dd'),
        ('\u09df', '\u09e1'), ('\u09e2', '\u09e3'),
        ('\u09e6', '\u09ef'), ('\u09f0', '\u09f1'),
        ('\u09f2', '\u09f3'), ('\u09f4', '\u09f9'),
        ('\u09fa', '\u09fa'), ('\u09fb', '\u09fb')
    ];

    pub fn Bengali(c: char) -> bool {
        super::bsearch_range_table(c, Bengali_table)
    }

    static Bopomofo_table : &'static [(char,char)] = &[
        ('\u02ea', '\u02eb'), ('\u3105', '\u312d'),
        ('\u31a0', '\u31ba')
    ];

    pub fn Bopomofo(c: char) -> bool {
        super::bsearch_range_table(c, Bopomofo_table)
    }

    static Braille_table : &'static [(char,char)] = &[
        ('\u2800', '\u28ff')
    ];

    pub fn Braille(c: char) -> bool {
        super::bsearch_range_table(c, Braille_table)
    }

    static Buginese_table : &'static [(char,char)] = &[
        ('\u1a00', '\u1a16'), ('\u1a17', '\u1a18'),
        ('\u1a19', '\u1a1a'), ('\u1a1b', '\u1a1b'),
        ('\u1a1e', '\u1a1f')
    ];

    pub fn Buginese(c: char) -> bool {
        super::bsearch_range_table(c, Buginese_table)
    }

    static Buhid_table : &'static [(char,char)] = &[
        ('\u1740', '\u1751'), ('\u1752', '\u1753')
    ];

    pub fn Buhid(c: char) -> bool {
        super::bsearch_range_table(c, Buhid_table)
    }

    static Canadian_Aboriginal_table : &'static [(char,char)] = &[
        ('\u1400', '\u1400'), ('\u1401', '\u166c'),
        ('\u166d', '\u166e'), ('\u166f', '\u167f'),
        ('\u18b0', '\u18f5')
    ];

    pub fn Canadian_Aboriginal(c: char) -> bool {
        super::bsearch_range_table(c, Canadian_Aboriginal_table)
    }

    static Carian_table : &'static [(char,char)] = &[
        ('\U000102a0', '\U000102d0')
    ];

    pub fn Carian(c: char) -> bool {
        super::bsearch_range_table(c, Carian_table)
    }

    static Cham_table : &'static [(char,char)] = &[
        ('\uaa00', '\uaa28'), ('\uaa29', '\uaa2e'),
        ('\uaa2f', '\uaa30'), ('\uaa31', '\uaa32'),
        ('\uaa33', '\uaa34'), ('\uaa35', '\uaa36'),
        ('\uaa40', '\uaa42'), ('\uaa43', '\uaa43'),
        ('\uaa44', '\uaa4b'), ('\uaa4c', '\uaa4c'),
        ('\uaa4d', '\uaa4d'), ('\uaa50', '\uaa59'),
        ('\uaa5c', '\uaa5f')
    ];

    pub fn Cham(c: char) -> bool {
        super::bsearch_range_table(c, Cham_table)
    }

    static Cherokee_table : &'static [(char,char)] = &[
        ('\u13a0', '\u13f4')
    ];

    pub fn Cherokee(c: char) -> bool {
        super::bsearch_range_table(c, Cherokee_table)
    }

    static Common_table : &'static [(char,char)] = &[
        ('\x00', '\x1f'), ('\x20', '\x20'),
        ('\x21', '\x23'), ('\x24', '\x24'),
        ('\x25', '\x27'), ('\x28', '\x28'),
        ('\x29', '\x29'), ('\x2a', '\x2a'),
        ('\x2b', '\x2b'), ('\x2c', '\x2c'),
        ('\x2d', '\x2d'), ('\x2e', '\x2f'),
        ('\x30', '\x39'), ('\x3a', '\x3b'),
        ('\x3c', '\x3e'), ('\x3f', '\x40'),
        ('\x5b', '\x5b'), ('\x5c', '\x5c'),
        ('\x5d', '\x5d'), ('\x5e', '\x5e'),
        ('\x5f', '\x5f'), ('\x60', '\x60'),
        ('\x7b', '\x7b'), ('\x7c', '\x7c'),
        ('\x7d', '\x7d'), ('\x7e', '\x7e'),
        ('\x7f', '\x9f'), ('\xa0', '\xa0'),
        ('\xa1', '\xa1'), ('\xa2', '\xa5'),
        ('\xa6', '\xa6'), ('\xa7', '\xa7'),
        ('\xa8', '\xa8'), ('\xa9', '\xa9'),
        ('\xab', '\xab'), ('\xac', '\xac'),
        ('\xad', '\xad'), ('\xae', '\xae'),
        ('\xaf', '\xaf'), ('\xb0', '\xb0'),
        ('\xb1', '\xb1'), ('\xb2', '\xb3'),
        ('\xb4', '\xb4'), ('\xb5', '\xb5'),
        ('\xb6', '\xb7'), ('\xb8', '\xb8'),
        ('\xb9', '\xb9'), ('\xbb', '\xbb'),
        ('\xbc', '\xbe'), ('\xbf', '\xbf'),
        ('\xd7', '\xd7'), ('\xf7', '\xf7'),
        ('\u02b9', '\u02c1'), ('\u02c2', '\u02c5'),
        ('\u02c6', '\u02d1'), ('\u02d2', '\u02df'),
        ('\u02e5', '\u02e9'), ('\u02ec', '\u02ec'),
        ('\u02ed', '\u02ed'), ('\u02ee', '\u02ee'),
        ('\u02ef', '\u02ff'), ('\u0374', '\u0374'),
        ('\u037e', '\u037e'), ('\u0385', '\u0385'),
        ('\u0387', '\u0387'), ('\u0589', '\u0589'),
        ('\u060c', '\u060c'), ('\u061b', '\u061b'),
        ('\u061f', '\u061f'), ('\u0640', '\u0640'),
        ('\u0660', '\u0669'), ('\u06dd', '\u06dd'),
        ('\u0964', '\u0965'), ('\u0e3f', '\u0e3f'),
        ('\u0fd5', '\u0fd8'), ('\u10fb', '\u10fb'),
        ('\u16eb', '\u16ed'), ('\u1735', '\u1736'),
        ('\u1802', '\u1803'), ('\u1805', '\u1805'),
        ('\u1cd3', '\u1cd3'), ('\u1ce1', '\u1ce1'),
        ('\u1ce9', '\u1cec'), ('\u1cee', '\u1cf1'),
        ('\u1cf2', '\u1cf3'), ('\u1cf5', '\u1cf6'),
        ('\u2000', '\u200a'), ('\u200b', '\u200b'),
        ('\u200e', '\u200f'), ('\u2010', '\u2015'),
        ('\u2016', '\u2017'), ('\u2018', '\u2018'),
        ('\u2019', '\u2019'), ('\u201a', '\u201a'),
        ('\u201b', '\u201c'), ('\u201d', '\u201d'),
        ('\u201e', '\u201e'), ('\u201f', '\u201f'),
        ('\u2020', '\u2027'), ('\u2028', '\u2028'),
        ('\u2029', '\u2029'), ('\u202a', '\u202e'),
        ('\u202f', '\u202f'), ('\u2030', '\u2038'),
        ('\u2039', '\u2039'), ('\u203a', '\u203a'),
        ('\u203b', '\u203e'), ('\u203f', '\u2040'),
        ('\u2041', '\u2043'), ('\u2044', '\u2044'),
        ('\u2045', '\u2045'), ('\u2046', '\u2046'),
        ('\u2047', '\u2051'), ('\u2052', '\u2052'),
        ('\u2053', '\u2053'), ('\u2054', '\u2054'),
        ('\u2055', '\u205e'), ('\u205f', '\u205f'),
        ('\u2060', '\u2064'), ('\u2066', '\u206f'),
        ('\u2070', '\u2070'), ('\u2074', '\u2079'),
        ('\u207a', '\u207c'), ('\u207d', '\u207d'),
        ('\u207e', '\u207e'), ('\u2080', '\u2089'),
        ('\u208a', '\u208c'), ('\u208d', '\u208d'),
        ('\u208e', '\u208e'), ('\u20a0', '\u20ba'),
        ('\u2100', '\u2101'), ('\u2102', '\u2102'),
        ('\u2103', '\u2106'), ('\u2107', '\u2107'),
        ('\u2108', '\u2109'), ('\u210a', '\u2113'),
        ('\u2114', '\u2114'), ('\u2115', '\u2115'),
        ('\u2116', '\u2117'), ('\u2118', '\u2118'),
        ('\u2119', '\u211d'), ('\u211e', '\u2123'),
        ('\u2124', '\u2124'), ('\u2125', '\u2125'),
        ('\u2127', '\u2127'), ('\u2128', '\u2128'),
        ('\u2129', '\u2129'), ('\u212c', '\u212d'),
        ('\u212e', '\u212e'), ('\u212f', '\u2131'),
        ('\u2133', '\u2134'), ('\u2135', '\u2138'),
        ('\u2139', '\u2139'), ('\u213a', '\u213b'),
        ('\u213c', '\u213f'), ('\u2140', '\u2144'),
        ('\u2145', '\u2149'), ('\u214a', '\u214a'),
        ('\u214b', '\u214b'), ('\u214c', '\u214d'),
        ('\u214f', '\u214f'), ('\u2150', '\u215f'),
        ('\u2189', '\u2189'), ('\u2190', '\u2194'),
        ('\u2195', '\u2199'), ('\u219a', '\u219b'),
        ('\u219c', '\u219f'), ('\u21a0', '\u21a0'),
        ('\u21a1', '\u21a2'), ('\u21a3', '\u21a3'),
        ('\u21a4', '\u21a5'), ('\u21a6', '\u21a6'),
        ('\u21a7', '\u21ad'), ('\u21ae', '\u21ae'),
        ('\u21af', '\u21cd'), ('\u21ce', '\u21cf'),
        ('\u21d0', '\u21d1'), ('\u21d2', '\u21d2'),
        ('\u21d3', '\u21d3'), ('\u21d4', '\u21d4'),
        ('\u21d5', '\u21f3'), ('\u21f4', '\u22ff'),
        ('\u2300', '\u2307'), ('\u2308', '\u2308'),
        ('\u2309', '\u2309'), ('\u230a', '\u230a'),
        ('\u230b', '\u230b'), ('\u230c', '\u231f'),
        ('\u2320', '\u2321'), ('\u2322', '\u2328'),
        ('\u2329', '\u2329'), ('\u232a', '\u232a'),
        ('\u232b', '\u237b'), ('\u237c', '\u237c'),
        ('\u237d', '\u239a'), ('\u239b', '\u23b3'),
        ('\u23b4', '\u23db'), ('\u23dc', '\u23e1'),
        ('\u23e2', '\u23f3'), ('\u2400', '\u2426'),
        ('\u2440', '\u244a'), ('\u2460', '\u249b'),
        ('\u249c', '\u24e9'), ('\u24ea', '\u24ff'),
        ('\u2500', '\u25b6'), ('\u25b7', '\u25b7'),
        ('\u25b8', '\u25c0'), ('\u25c1', '\u25c1'),
        ('\u25c2', '\u25f7'), ('\u25f8', '\u25ff'),
        ('\u2600', '\u266e'), ('\u266f', '\u266f'),
        ('\u2670', '\u26ff'), ('\u2701', '\u2767'),
        ('\u2768', '\u2768'), ('\u2769', '\u2769'),
        ('\u276a', '\u276a'), ('\u276b', '\u276b'),
        ('\u276c', '\u276c'), ('\u276d', '\u276d'),
        ('\u276e', '\u276e'), ('\u276f', '\u276f'),
        ('\u2770', '\u2770'), ('\u2771', '\u2771'),
        ('\u2772', '\u2772'), ('\u2773', '\u2773'),
        ('\u2774', '\u2774'), ('\u2775', '\u2775'),
        ('\u2776', '\u2793'), ('\u2794', '\u27bf'),
        ('\u27c0', '\u27c4'), ('\u27c5', '\u27c5'),
        ('\u27c6', '\u27c6'), ('\u27c7', '\u27e5'),
        ('\u27e6', '\u27e6'), ('\u27e7', '\u27e7'),
        ('\u27e8', '\u27e8'), ('\u27e9', '\u27e9'),
        ('\u27ea', '\u27ea'), ('\u27eb', '\u27eb'),
        ('\u27ec', '\u27ec'), ('\u27ed', '\u27ed'),
        ('\u27ee', '\u27ee'), ('\u27ef', '\u27ef'),
        ('\u27f0', '\u27ff'), ('\u2900', '\u2982'),
        ('\u2983', '\u2983'), ('\u2984', '\u2984'),
        ('\u2985', '\u2985'), ('\u2986', '\u2986'),
        ('\u2987', '\u2987'), ('\u2988', '\u2988'),
        ('\u2989', '\u2989'), ('\u298a', '\u298a'),
        ('\u298b', '\u298b'), ('\u298c', '\u298c'),
        ('\u298d', '\u298d'), ('\u298e', '\u298e'),
        ('\u298f', '\u298f'), ('\u2990', '\u2990'),
        ('\u2991', '\u2991'), ('\u2992', '\u2992'),
        ('\u2993', '\u2993'), ('\u2994', '\u2994'),
        ('\u2995', '\u2995'), ('\u2996', '\u2996'),
        ('\u2997', '\u2997'), ('\u2998', '\u2998'),
        ('\u2999', '\u29d7'), ('\u29d8', '\u29d8'),
        ('\u29d9', '\u29d9'), ('\u29da', '\u29da'),
        ('\u29db', '\u29db'), ('\u29dc', '\u29fb'),
        ('\u29fc', '\u29fc'), ('\u29fd', '\u29fd'),
        ('\u29fe', '\u2aff'), ('\u2b00', '\u2b2f'),
        ('\u2b30', '\u2b44'), ('\u2b45', '\u2b46'),
        ('\u2b47', '\u2b4c'), ('\u2b50', '\u2b59'),
        ('\u2e00', '\u2e01'), ('\u2e02', '\u2e02'),
        ('\u2e03', '\u2e03'), ('\u2e04', '\u2e04'),
        ('\u2e05', '\u2e05'), ('\u2e06', '\u2e08'),
        ('\u2e09', '\u2e09'), ('\u2e0a', '\u2e0a'),
        ('\u2e0b', '\u2e0b'), ('\u2e0c', '\u2e0c'),
        ('\u2e0d', '\u2e0d'), ('\u2e0e', '\u2e16'),
        ('\u2e17', '\u2e17'), ('\u2e18', '\u2e19'),
        ('\u2e1a', '\u2e1a'), ('\u2e1b', '\u2e1b'),
        ('\u2e1c', '\u2e1c'), ('\u2e1d', '\u2e1d'),
        ('\u2e1e', '\u2e1f'), ('\u2e20', '\u2e20'),
        ('\u2e21', '\u2e21'), ('\u2e22', '\u2e22'),
        ('\u2e23', '\u2e23'), ('\u2e24', '\u2e24'),
        ('\u2e25', '\u2e25'), ('\u2e26', '\u2e26'),
        ('\u2e27', '\u2e27'), ('\u2e28', '\u2e28'),
        ('\u2e29', '\u2e29'), ('\u2e2a', '\u2e2e'),
        ('\u2e2f', '\u2e2f'), ('\u2e30', '\u2e39'),
        ('\u2e3a', '\u2e3b'), ('\u2ff0', '\u2ffb'),
        ('\u3000', '\u3000'), ('\u3001', '\u3003'),
        ('\u3004', '\u3004'), ('\u3006', '\u3006'),
        ('\u3008', '\u3008'), ('\u3009', '\u3009'),
        ('\u300a', '\u300a'), ('\u300b', '\u300b'),
        ('\u300c', '\u300c'), ('\u300d', '\u300d'),
        ('\u300e', '\u300e'), ('\u300f', '\u300f'),
        ('\u3010', '\u3010'), ('\u3011', '\u3011'),
        ('\u3012', '\u3013'), ('\u3014', '\u3014'),
        ('\u3015', '\u3015'), ('\u3016', '\u3016'),
        ('\u3017', '\u3017'), ('\u3018', '\u3018'),
        ('\u3019', '\u3019'), ('\u301a', '\u301a'),
        ('\u301b', '\u301b'), ('\u301c', '\u301c'),
        ('\u301d', '\u301d'), ('\u301e', '\u301f'),
        ('\u3020', '\u3020'), ('\u3030', '\u3030'),
        ('\u3031', '\u3035'), ('\u3036', '\u3037'),
        ('\u303c', '\u303c'), ('\u303d', '\u303d'),
        ('\u303e', '\u303f'), ('\u309b', '\u309c'),
        ('\u30a0', '\u30a0'), ('\u30fb', '\u30fb'),
        ('\u30fc', '\u30fc'), ('\u3190', '\u3191'),
        ('\u3192', '\u3195'), ('\u3196', '\u319f'),
        ('\u31c0', '\u31e3'), ('\u3220', '\u3229'),
        ('\u322a', '\u3247'), ('\u3248', '\u324f'),
        ('\u3250', '\u3250'), ('\u3251', '\u325f'),
        ('\u327f', '\u327f'), ('\u3280', '\u3289'),
        ('\u328a', '\u32b0'), ('\u32b1', '\u32bf'),
        ('\u32c0', '\u32cf'), ('\u3358', '\u33ff'),
        ('\u4dc0', '\u4dff'), ('\ua700', '\ua716'),
        ('\ua717', '\ua71f'), ('\ua720', '\ua721'),
        ('\ua788', '\ua788'), ('\ua789', '\ua78a'),
        ('\ua830', '\ua835'), ('\ua836', '\ua837'),
        ('\ua838', '\ua838'), ('\ua839', '\ua839'),
        ('\ua9cf', '\ua9cf'), ('\ufd3e', '\ufd3e'),
        ('\ufd3f', '\ufd3f'), ('\ufdfd', '\ufdfd'),
        ('\ufe10', '\ufe16'), ('\ufe17', '\ufe17'),
        ('\ufe18', '\ufe18'), ('\ufe19', '\ufe19'),
        ('\ufe30', '\ufe30'), ('\ufe31', '\ufe32'),
        ('\ufe33', '\ufe34'), ('\ufe35', '\ufe35'),
        ('\ufe36', '\ufe36'), ('\ufe37', '\ufe37'),
        ('\ufe38', '\ufe38'), ('\ufe39', '\ufe39'),
        ('\ufe3a', '\ufe3a'), ('\ufe3b', '\ufe3b'),
        ('\ufe3c', '\ufe3c'), ('\ufe3d', '\ufe3d'),
        ('\ufe3e', '\ufe3e'), ('\ufe3f', '\ufe3f'),
        ('\ufe40', '\ufe40'), ('\ufe41', '\ufe41'),
        ('\ufe42', '\ufe42'), ('\ufe43', '\ufe43'),
        ('\ufe44', '\ufe44'), ('\ufe45', '\ufe46'),
        ('\ufe47', '\ufe47'), ('\ufe48', '\ufe48'),
        ('\ufe49', '\ufe4c'), ('\ufe4d', '\ufe4f'),
        ('\ufe50', '\ufe52'), ('\ufe54', '\ufe57'),
        ('\ufe58', '\ufe58'), ('\ufe59', '\ufe59'),
        ('\ufe5a', '\ufe5a'), ('\ufe5b', '\ufe5b'),
        ('\ufe5c', '\ufe5c'), ('\ufe5d', '\ufe5d'),
        ('\ufe5e', '\ufe5e'), ('\ufe5f', '\ufe61'),
        ('\ufe62', '\ufe62'), ('\ufe63', '\ufe63'),
        ('\ufe64', '\ufe66'), ('\ufe68', '\ufe68'),
        ('\ufe69', '\ufe69'), ('\ufe6a', '\ufe6b'),
        ('\ufeff', '\ufeff'), ('\uff01', '\uff03'),
        ('\uff04', '\uff04'), ('\uff05', '\uff07'),
        ('\uff08', '\uff08'), ('\uff09', '\uff09'),
        ('\uff0a', '\uff0a'), ('\uff0b', '\uff0b'),
        ('\uff0c', '\uff0c'), ('\uff0d', '\uff0d'),
        ('\uff0e', '\uff0f'), ('\uff10', '\uff19'),
        ('\uff1a', '\uff1b'), ('\uff1c', '\uff1e'),
        ('\uff1f', '\uff20'), ('\uff3b', '\uff3b'),
        ('\uff3c', '\uff3c'), ('\uff3d', '\uff3d'),
        ('\uff3e', '\uff3e'), ('\uff3f', '\uff3f'),
        ('\uff40', '\uff40'), ('\uff5b', '\uff5b'),
        ('\uff5c', '\uff5c'), ('\uff5d', '\uff5d'),
        ('\uff5e', '\uff5e'), ('\uff5f', '\uff5f'),
        ('\uff60', '\uff60'), ('\uff61', '\uff61'),
        ('\uff62', '\uff62'), ('\uff63', '\uff63'),
        ('\uff64', '\uff65'), ('\uff70', '\uff70'),
        ('\uff9e', '\uff9f'), ('\uffe0', '\uffe1'),
        ('\uffe2', '\uffe2'), ('\uffe3', '\uffe3'),
        ('\uffe4', '\uffe4'), ('\uffe5', '\uffe6'),
        ('\uffe8', '\uffe8'), ('\uffe9', '\uffec'),
        ('\uffed', '\uffee'), ('\ufff9', '\ufffb'),
        ('\ufffc', '\ufffd'), ('\U00010100', '\U00010102'),
        ('\U00010107', '\U00010133'), ('\U00010137', '\U0001013f'),
        ('\U00010190', '\U0001019b'), ('\U000101d0', '\U000101fc'),
        ('\U0001d000', '\U0001d0f5'), ('\U0001d100', '\U0001d126'),
        ('\U0001d129', '\U0001d164'), ('\U0001d165', '\U0001d166'),
        ('\U0001d16a', '\U0001d16c'), ('\U0001d16d', '\U0001d172'),
        ('\U0001d173', '\U0001d17a'), ('\U0001d183', '\U0001d184'),
        ('\U0001d18c', '\U0001d1a9'), ('\U0001d1ae', '\U0001d1dd'),
        ('\U0001d300', '\U0001d356'), ('\U0001d360', '\U0001d371'),
        ('\U0001d400', '\U0001d454'), ('\U0001d456', '\U0001d49c'),
        ('\U0001d49e', '\U0001d49f'), ('\U0001d4a2', '\U0001d4a2'),
        ('\U0001d4a5', '\U0001d4a6'), ('\U0001d4a9', '\U0001d4ac'),
        ('\U0001d4ae', '\U0001d4b9'), ('\U0001d4bb', '\U0001d4bb'),
        ('\U0001d4bd', '\U0001d4c3'), ('\U0001d4c5', '\U0001d505'),
        ('\U0001d507', '\U0001d50a'), ('\U0001d50d', '\U0001d514'),
        ('\U0001d516', '\U0001d51c'), ('\U0001d51e', '\U0001d539'),
        ('\U0001d53b', '\U0001d53e'), ('\U0001d540', '\U0001d544'),
        ('\U0001d546', '\U0001d546'), ('\U0001d54a', '\U0001d550'),
        ('\U0001d552', '\U0001d6a5'), ('\U0001d6a8', '\U0001d6c0'),
        ('\U0001d6c1', '\U0001d6c1'), ('\U0001d6c2', '\U0001d6da'),
        ('\U0001d6db', '\U0001d6db'), ('\U0001d6dc', '\U0001d6fa'),
        ('\U0001d6fb', '\U0001d6fb'), ('\U0001d6fc', '\U0001d714'),
        ('\U0001d715', '\U0001d715'), ('\U0001d716', '\U0001d734'),
        ('\U0001d735', '\U0001d735'), ('\U0001d736', '\U0001d74e'),
        ('\U0001d74f', '\U0001d74f'), ('\U0001d750', '\U0001d76e'),
        ('\U0001d76f', '\U0001d76f'), ('\U0001d770', '\U0001d788'),
        ('\U0001d789', '\U0001d789'), ('\U0001d78a', '\U0001d7a8'),
        ('\U0001d7a9', '\U0001d7a9'), ('\U0001d7aa', '\U0001d7c2'),
        ('\U0001d7c3', '\U0001d7c3'), ('\U0001d7c4', '\U0001d7cb'),
        ('\U0001d7ce', '\U0001d7ff'), ('\U0001f000', '\U0001f02b'),
        ('\U0001f030', '\U0001f093'), ('\U0001f0a0', '\U0001f0ae'),
        ('\U0001f0b1', '\U0001f0be'), ('\U0001f0c1', '\U0001f0cf'),
        ('\U0001f0d1', '\U0001f0df'), ('\U0001f100', '\U0001f10a'),
        ('\U0001f110', '\U0001f12e'), ('\U0001f130', '\U0001f16b'),
        ('\U0001f170', '\U0001f19a'), ('\U0001f1e6', '\U0001f1ff'),
        ('\U0001f201', '\U0001f202'), ('\U0001f210', '\U0001f23a'),
        ('\U0001f240', '\U0001f248'), ('\U0001f250', '\U0001f251'),
        ('\U0001f300', '\U0001f320'), ('\U0001f330', '\U0001f335'),
        ('\U0001f337', '\U0001f37c'), ('\U0001f380', '\U0001f393'),
        ('\U0001f3a0', '\U0001f3c4'), ('\U0001f3c6', '\U0001f3ca'),
        ('\U0001f3e0', '\U0001f3f0'), ('\U0001f400', '\U0001f43e'),
        ('\U0001f440', '\U0001f440'), ('\U0001f442', '\U0001f4f7'),
        ('\U0001f4f9', '\U0001f4fc'), ('\U0001f500', '\U0001f53d'),
        ('\U0001f540', '\U0001f543'), ('\U0001f550', '\U0001f567'),
        ('\U0001f5fb', '\U0001f640'), ('\U0001f645', '\U0001f64f'),
        ('\U0001f680', '\U0001f6c5'), ('\U0001f700', '\U0001f773'),
        ('\U000e0001', '\U000e0001'), ('\U000e0020', '\U000e007f')
    ];

    pub fn Common(c: char) -> bool {
        super::bsearch_range_table(c, Common_table)
    }

    static Coptic_table : &'static [(char,char)] = &[
        ('\u03e2', '\u03ef'), ('\u2c80', '\u2ce4'),
        ('\u2ce5', '\u2cea'), ('\u2ceb', '\u2cee'),
        ('\u2cef', '\u2cf1'), ('\u2cf2', '\u2cf3'),
        ('\u2cf9', '\u2cfc'), ('\u2cfd', '\u2cfd'),
        ('\u2cfe', '\u2cff')
    ];

    pub fn Coptic(c: char) -> bool {
        super::bsearch_range_table(c, Coptic_table)
    }

    static Cuneiform_table : &'static [(char,char)] = &[
        ('\U00012000', '\U0001236e'), ('\U00012400', '\U00012462'),
        ('\U00012470', '\U00012473')
    ];

    pub fn Cuneiform(c: char) -> bool {
        super::bsearch_range_table(c, Cuneiform_table)
    }

    static Cypriot_table : &'static [(char,char)] = &[
        ('\U00010800', '\U00010805'), ('\U00010808', '\U00010808'),
        ('\U0001080a', '\U00010835'), ('\U00010837', '\U00010838'),
        ('\U0001083c', '\U0001083c'), ('\U0001083f', '\U0001083f')
    ];

    pub fn Cypriot(c: char) -> bool {
        super::bsearch_range_table(c, Cypriot_table)
    }

    static Cyrillic_table : &'static [(char,char)] = &[
        ('\u0400', '\u0481'), ('\u0482', '\u0482'),
        ('\u0483', '\u0484'), ('\u0487', '\u0487'),
        ('\u0488', '\u0489'), ('\u048a', '\u0527'),
        ('\u1d2b', '\u1d2b'), ('\u1d78', '\u1d78'),
        ('\u2de0', '\u2dff'), ('\ua640', '\ua66d'),
        ('\ua66e', '\ua66e'), ('\ua66f', '\ua66f'),
        ('\ua670', '\ua672'), ('\ua673', '\ua673'),
        ('\ua674', '\ua67d'), ('\ua67e', '\ua67e'),
        ('\ua67f', '\ua67f'), ('\ua680', '\ua697'),
        ('\ua69f', '\ua69f')
    ];

    pub fn Cyrillic(c: char) -> bool {
        super::bsearch_range_table(c, Cyrillic_table)
    }

    static Deseret_table : &'static [(char,char)] = &[
        ('\U00010400', '\U0001044f')
    ];

    pub fn Deseret(c: char) -> bool {
        super::bsearch_range_table(c, Deseret_table)
    }

    static Devanagari_table : &'static [(char,char)] = &[
        ('\u0900', '\u0902'), ('\u0903', '\u0903'),
        ('\u0904', '\u0939'), ('\u093a', '\u093a'),
        ('\u093b', '\u093b'), ('\u093c', '\u093c'),
        ('\u093d', '\u093d'), ('\u093e', '\u0940'),
        ('\u0941', '\u0948'), ('\u0949', '\u094c'),
        ('\u094d', '\u094d'), ('\u094e', '\u094f'),
        ('\u0950', '\u0950'), ('\u0953', '\u0957'),
        ('\u0958', '\u0961'), ('\u0962', '\u0963'),
        ('\u0966', '\u096f'), ('\u0970', '\u0970'),
        ('\u0971', '\u0971'), ('\u0972', '\u0977'),
        ('\u0979', '\u097f'), ('\ua8e0', '\ua8f1'),
        ('\ua8f2', '\ua8f7'), ('\ua8f8', '\ua8fa'),
        ('\ua8fb', '\ua8fb')
    ];

    pub fn Devanagari(c: char) -> bool {
        super::bsearch_range_table(c, Devanagari_table)
    }

    static Ethiopic_table : &'static [(char,char)] = &[
        ('\u1200', '\u1248'), ('\u124a', '\u124d'),
        ('\u1250', '\u1256'), ('\u1258', '\u1258'),
        ('\u125a', '\u125d'), ('\u1260', '\u1288'),
        ('\u128a', '\u128d'), ('\u1290', '\u12b0'),
        ('\u12b2', '\u12b5'), ('\u12b8', '\u12be'),
        ('\u12c0', '\u12c0'), ('\u12c2', '\u12c5'),
        ('\u12c8', '\u12d6'), ('\u12d8', '\u1310'),
        ('\u1312', '\u1315'), ('\u1318', '\u135a'),
        ('\u135d', '\u135f'), ('\u1360', '\u1368'),
        ('\u1369', '\u137c'), ('\u1380', '\u138f'),
        ('\u1390', '\u1399'), ('\u2d80', '\u2d96'),
        ('\u2da0', '\u2da6'), ('\u2da8', '\u2dae'),
        ('\u2db0', '\u2db6'), ('\u2db8', '\u2dbe'),
        ('\u2dc0', '\u2dc6'), ('\u2dc8', '\u2dce'),
        ('\u2dd0', '\u2dd6'), ('\u2dd8', '\u2dde'),
        ('\uab01', '\uab06'), ('\uab09', '\uab0e'),
        ('\uab11', '\uab16'), ('\uab20', '\uab26'),
        ('\uab28', '\uab2e')
    ];

    pub fn Ethiopic(c: char) -> bool {
        super::bsearch_range_table(c, Ethiopic_table)
    }

    static Georgian_table : &'static [(char,char)] = &[
        ('\u10a0', '\u10c5'), ('\u10c7', '\u10c7'),
        ('\u10cd', '\u10cd'), ('\u10d0', '\u10fa'),
        ('\u10fc', '\u10fc'), ('\u10fd', '\u10ff'),
        ('\u2d00', '\u2d25'), ('\u2d27', '\u2d27'),
        ('\u2d2d', '\u2d2d')
    ];

    pub fn Georgian(c: char) -> bool {
        super::bsearch_range_table(c, Georgian_table)
    }

    static Glagolitic_table : &'static [(char,char)] = &[
        ('\u2c00', '\u2c2e'), ('\u2c30', '\u2c5e')
    ];

    pub fn Glagolitic(c: char) -> bool {
        super::bsearch_range_table(c, Glagolitic_table)
    }

    static Gothic_table : &'static [(char,char)] = &[
        ('\U00010330', '\U00010340'), ('\U00010341', '\U00010341'),
        ('\U00010342', '\U00010349'), ('\U0001034a', '\U0001034a')
    ];

    pub fn Gothic(c: char) -> bool {
        super::bsearch_range_table(c, Gothic_table)
    }

    static Greek_table : &'static [(char,char)] = &[
        ('\u0370', '\u0373'), ('\u0375', '\u0375'),
        ('\u0376', '\u0377'), ('\u037a', '\u037a'),
        ('\u037b', '\u037d'), ('\u0384', '\u0384'),
        ('\u0386', '\u0386'), ('\u0388', '\u038a'),
        ('\u038c', '\u038c'), ('\u038e', '\u03a1'),
        ('\u03a3', '\u03e1'), ('\u03f0', '\u03f5'),
        ('\u03f6', '\u03f6'), ('\u03f7', '\u03ff'),
        ('\u1d26', '\u1d2a'), ('\u1d5d', '\u1d61'),
        ('\u1d66', '\u1d6a'), ('\u1dbf', '\u1dbf'),
        ('\u1f00', '\u1f15'), ('\u1f18', '\u1f1d'),
        ('\u1f20', '\u1f45'), ('\u1f48', '\u1f4d'),
        ('\u1f50', '\u1f57'), ('\u1f59', '\u1f59'),
        ('\u1f5b', '\u1f5b'), ('\u1f5d', '\u1f5d'),
        ('\u1f5f', '\u1f7d'), ('\u1f80', '\u1fb4'),
        ('\u1fb6', '\u1fbc'), ('\u1fbd', '\u1fbd'),
        ('\u1fbe', '\u1fbe'), ('\u1fbf', '\u1fc1'),
        ('\u1fc2', '\u1fc4'), ('\u1fc6', '\u1fcc'),
        ('\u1fcd', '\u1fcf'), ('\u1fd0', '\u1fd3'),
        ('\u1fd6', '\u1fdb'), ('\u1fdd', '\u1fdf'),
        ('\u1fe0', '\u1fec'), ('\u1fed', '\u1fef'),
        ('\u1ff2', '\u1ff4'), ('\u1ff6', '\u1ffc'),
        ('\u1ffd', '\u1ffe'), ('\u2126', '\u2126'),
        ('\U00010140', '\U00010174'), ('\U00010175', '\U00010178'),
        ('\U00010179', '\U00010189'), ('\U0001018a', '\U0001018a'),
        ('\U0001d200', '\U0001d241'), ('\U0001d242', '\U0001d244'),
        ('\U0001d245', '\U0001d245')
    ];

    pub fn Greek(c: char) -> bool {
        super::bsearch_range_table(c, Greek_table)
    }

    static Gujarati_table : &'static [(char,char)] = &[
        ('\u0a81', '\u0a82'), ('\u0a83', '\u0a83'),
        ('\u0a85', '\u0a8d'), ('\u0a8f', '\u0a91'),
        ('\u0a93', '\u0aa8'), ('\u0aaa', '\u0ab0'),
        ('\u0ab2', '\u0ab3'), ('\u0ab5', '\u0ab9'),
        ('\u0abc', '\u0abc'), ('\u0abd', '\u0abd'),
        ('\u0abe', '\u0ac0'), ('\u0ac1', '\u0ac5'),
        ('\u0ac7', '\u0ac8'), ('\u0ac9', '\u0ac9'),
        ('\u0acb', '\u0acc'), ('\u0acd', '\u0acd'),
        ('\u0ad0', '\u0ad0'), ('\u0ae0', '\u0ae1'),
        ('\u0ae2', '\u0ae3'), ('\u0ae6', '\u0aef'),
        ('\u0af0', '\u0af0'), ('\u0af1', '\u0af1')
    ];

    pub fn Gujarati(c: char) -> bool {
        super::bsearch_range_table(c, Gujarati_table)
    }

    static Gurmukhi_table : &'static [(char,char)] = &[
        ('\u0a01', '\u0a02'), ('\u0a03', '\u0a03'),
        ('\u0a05', '\u0a0a'), ('\u0a0f', '\u0a10'),
        ('\u0a13', '\u0a28'), ('\u0a2a', '\u0a30'),
        ('\u0a32', '\u0a33'), ('\u0a35', '\u0a36'),
        ('\u0a38', '\u0a39'), ('\u0a3c', '\u0a3c'),
        ('\u0a3e', '\u0a40'), ('\u0a41', '\u0a42'),
        ('\u0a47', '\u0a48'), ('\u0a4b', '\u0a4d'),
        ('\u0a51', '\u0a51'), ('\u0a59', '\u0a5c'),
        ('\u0a5e', '\u0a5e'), ('\u0a66', '\u0a6f'),
        ('\u0a70', '\u0a71'), ('\u0a72', '\u0a74'),
        ('\u0a75', '\u0a75')
    ];

    pub fn Gurmukhi(c: char) -> bool {
        super::bsearch_range_table(c, Gurmukhi_table)
    }

    static Han_table : &'static [(char,char)] = &[
        ('\u2e80', '\u2e99'), ('\u2e9b', '\u2ef3'),
        ('\u2f00', '\u2fd5'), ('\u3005', '\u3005'),
        ('\u3007', '\u3007'), ('\u3021', '\u3029'),
        ('\u3038', '\u303a'), ('\u303b', '\u303b'),
        ('\u3400', '\u4db5'), ('\u4e00', '\u9fcc'),
        ('\uf900', '\ufa6d'), ('\ufa70', '\ufad9'),
        ('\U00020000', '\U0002a6d6'), ('\U0002a700', '\U0002b734'),
        ('\U0002b740', '\U0002b81d'), ('\U0002f800', '\U0002fa1d')
    ];

    pub fn Han(c: char) -> bool {
        super::bsearch_range_table(c, Han_table)
    }

    static Hangul_table : &'static [(char,char)] = &[
        ('\u1100', '\u11ff'), ('\u302e', '\u302f'),
        ('\u3131', '\u318e'), ('\u3200', '\u321e'),
        ('\u3260', '\u327e'), ('\ua960', '\ua97c'),
        ('\uac00', '\ud7a3'), ('\ud7b0', '\ud7c6'),
        ('\ud7cb', '\ud7fb'), ('\uffa0', '\uffbe'),
        ('\uffc2', '\uffc7'), ('\uffca', '\uffcf'),
        ('\uffd2', '\uffd7'), ('\uffda', '\uffdc')
    ];

    pub fn Hangul(c: char) -> bool {
        super::bsearch_range_table(c, Hangul_table)
    }

    static Hanunoo_table : &'static [(char,char)] = &[
        ('\u1720', '\u1731'), ('\u1732', '\u1734')
    ];

    pub fn Hanunoo(c: char) -> bool {
        super::bsearch_range_table(c, Hanunoo_table)
    }

    static Hebrew_table : &'static [(char,char)] = &[
        ('\u0591', '\u05bd'), ('\u05be', '\u05be'),
        ('\u05bf', '\u05bf'), ('\u05c0', '\u05c0'),
        ('\u05c1', '\u05c2'), ('\u05c3', '\u05c3'),
        ('\u05c4', '\u05c5'), ('\u05c6', '\u05c6'),
        ('\u05c7', '\u05c7'), ('\u05d0', '\u05ea'),
        ('\u05f0', '\u05f2'), ('\u05f3', '\u05f4'),
        ('\ufb1d', '\ufb1d'), ('\ufb1e', '\ufb1e'),
        ('\ufb1f', '\ufb28'), ('\ufb29', '\ufb29'),
        ('\ufb2a', '\ufb36'), ('\ufb38', '\ufb3c'),
        ('\ufb3e', '\ufb3e'), ('\ufb40', '\ufb41'),
        ('\ufb43', '\ufb44'), ('\ufb46', '\ufb4f')
    ];

    pub fn Hebrew(c: char) -> bool {
        super::bsearch_range_table(c, Hebrew_table)
    }

    static Hiragana_table : &'static [(char,char)] = &[
        ('\u3041', '\u3096'), ('\u309d', '\u309e'),
        ('\u309f', '\u309f'), ('\U0001b001', '\U0001b001'),
        ('\U0001f200', '\U0001f200')
    ];

    pub fn Hiragana(c: char) -> bool {
        super::bsearch_range_table(c, Hiragana_table)
    }

    static Inherited_table : &'static [(char,char)] = &[
        ('\u0300', '\u036f'), ('\u0485', '\u0486'),
        ('\u064b', '\u0655'), ('\u0670', '\u0670'),
        ('\u0951', '\u0952'), ('\u1cd0', '\u1cd2'),
        ('\u1cd4', '\u1ce0'), ('\u1ce2', '\u1ce8'),
        ('\u1ced', '\u1ced'), ('\u1cf4', '\u1cf4'),
        ('\u1dc0', '\u1de6'), ('\u1dfc', '\u1dff'),
        ('\u200c', '\u200d'), ('\u20d0', '\u20dc'),
        ('\u20dd', '\u20e0'), ('\u20e1', '\u20e1'),
        ('\u20e2', '\u20e4'), ('\u20e5', '\u20f0'),
        ('\u302a', '\u302d'), ('\u3099', '\u309a'),
        ('\ufe00', '\ufe0f'), ('\ufe20', '\ufe26'),
        ('\U000101fd', '\U000101fd'), ('\U0001d167', '\U0001d169'),
        ('\U0001d17b', '\U0001d182'), ('\U0001d185', '\U0001d18b'),
        ('\U0001d1aa', '\U0001d1ad'), ('\U000e0100', '\U000e01ef')
    ];

    pub fn Inherited(c: char) -> bool {
        super::bsearch_range_table(c, Inherited_table)
    }

    static Kannada_table : &'static [(char,char)] = &[
        ('\u0c82', '\u0c83'), ('\u0c85', '\u0c8c'),
        ('\u0c8e', '\u0c90'), ('\u0c92', '\u0ca8'),
        ('\u0caa', '\u0cb3'), ('\u0cb5', '\u0cb9'),
        ('\u0cbc', '\u0cbc'), ('\u0cbd', '\u0cbd'),
        ('\u0cbe', '\u0cbe'), ('\u0cbf', '\u0cbf'),
        ('\u0cc0', '\u0cc4'), ('\u0cc6', '\u0cc6'),
        ('\u0cc7', '\u0cc8'), ('\u0cca', '\u0ccb'),
        ('\u0ccc', '\u0ccd'), ('\u0cd5', '\u0cd6'),
        ('\u0cde', '\u0cde'), ('\u0ce0', '\u0ce1'),
        ('\u0ce2', '\u0ce3'), ('\u0ce6', '\u0cef'),
        ('\u0cf1', '\u0cf2')
    ];

    pub fn Kannada(c: char) -> bool {
        super::bsearch_range_table(c, Kannada_table)
    }

    static Katakana_table : &'static [(char,char)] = &[
        ('\u30a1', '\u30fa'), ('\u30fd', '\u30fe'),
        ('\u30ff', '\u30ff'), ('\u31f0', '\u31ff'),
        ('\u32d0', '\u32fe'), ('\u3300', '\u3357'),
        ('\uff66', '\uff6f'), ('\uff71', '\uff9d'),
        ('\U0001b000', '\U0001b000')
    ];

    pub fn Katakana(c: char) -> bool {
        super::bsearch_range_table(c, Katakana_table)
    }

    static Kayah_Li_table : &'static [(char,char)] = &[
        ('\ua900', '\ua909'), ('\ua90a', '\ua925'),
        ('\ua926', '\ua92d'), ('\ua92e', '\ua92f')
    ];

    pub fn Kayah_Li(c: char) -> bool {
        super::bsearch_range_table(c, Kayah_Li_table)
    }

    static Kharoshthi_table : &'static [(char,char)] = &[
        ('\U00010a00', '\U00010a00'), ('\U00010a01', '\U00010a03'),
        ('\U00010a05', '\U00010a06'), ('\U00010a0c', '\U00010a0f'),
        ('\U00010a10', '\U00010a13'), ('\U00010a15', '\U00010a17'),
        ('\U00010a19', '\U00010a33'), ('\U00010a38', '\U00010a3a'),
        ('\U00010a3f', '\U00010a3f'), ('\U00010a40', '\U00010a47'),
        ('\U00010a50', '\U00010a58')
    ];

    pub fn Kharoshthi(c: char) -> bool {
        super::bsearch_range_table(c, Kharoshthi_table)
    }

    static Khmer_table : &'static [(char,char)] = &[
        ('\u1780', '\u17b3'), ('\u17b4', '\u17b5'),
        ('\u17b6', '\u17b6'), ('\u17b7', '\u17bd'),
        ('\u17be', '\u17c5'), ('\u17c6', '\u17c6'),
        ('\u17c7', '\u17c8'), ('\u17c9', '\u17d3'),
        ('\u17d4', '\u17d6'), ('\u17d7', '\u17d7'),
        ('\u17d8', '\u17da'), ('\u17db', '\u17db'),
        ('\u17dc', '\u17dc'), ('\u17dd', '\u17dd'),
        ('\u17e0', '\u17e9'), ('\u17f0', '\u17f9'),
        ('\u19e0', '\u19ff')
    ];

    pub fn Khmer(c: char) -> bool {
        super::bsearch_range_table(c, Khmer_table)
    }

    static Lao_table : &'static [(char,char)] = &[
        ('\u0e81', '\u0e82'), ('\u0e84', '\u0e84'),
        ('\u0e87', '\u0e88'), ('\u0e8a', '\u0e8a'),
        ('\u0e8d', '\u0e8d'), ('\u0e94', '\u0e97'),
        ('\u0e99', '\u0e9f'), ('\u0ea1', '\u0ea3'),
        ('\u0ea5', '\u0ea5'), ('\u0ea7', '\u0ea7'),
        ('\u0eaa', '\u0eab'), ('\u0ead', '\u0eb0'),
        ('\u0eb1', '\u0eb1'), ('\u0eb2', '\u0eb3'),
        ('\u0eb4', '\u0eb9'), ('\u0ebb', '\u0ebc'),
        ('\u0ebd', '\u0ebd'), ('\u0ec0', '\u0ec4'),
        ('\u0ec6', '\u0ec6'), ('\u0ec8', '\u0ecd'),
        ('\u0ed0', '\u0ed9'), ('\u0edc', '\u0edf')
    ];

    pub fn Lao(c: char) -> bool {
        super::bsearch_range_table(c, Lao_table)
    }

    static Latin_table : &'static [(char,char)] = &[
        ('\x41', '\x5a'), ('\x61', '\x7a'),
        ('\xaa', '\xaa'), ('\xba', '\xba'),
        ('\xc0', '\xd6'), ('\xd8', '\xf6'),
        ('\xf8', '\u01ba'), ('\u01bb', '\u01bb'),
        ('\u01bc', '\u01bf'), ('\u01c0', '\u01c3'),
        ('\u01c4', '\u0293'), ('\u0294', '\u0294'),
        ('\u0295', '\u02af'), ('\u02b0', '\u02b8'),
        ('\u02e0', '\u02e4'), ('\u1d00', '\u1d25'),
        ('\u1d2c', '\u1d5c'), ('\u1d62', '\u1d65'),
        ('\u1d6b', '\u1d77'), ('\u1d79', '\u1d9a'),
        ('\u1d9b', '\u1dbe'), ('\u1e00', '\u1eff'),
        ('\u2071', '\u2071'), ('\u207f', '\u207f'),
        ('\u2090', '\u209c'), ('\u212a', '\u212b'),
        ('\u2132', '\u2132'), ('\u214e', '\u214e'),
        ('\u2160', '\u2182'), ('\u2183', '\u2184'),
        ('\u2185', '\u2188'), ('\u2c60', '\u2c7b'),
        ('\u2c7c', '\u2c7d'), ('\u2c7e', '\u2c7f'),
        ('\ua722', '\ua76f'), ('\ua770', '\ua770'),
        ('\ua771', '\ua787'), ('\ua78b', '\ua78e'),
        ('\ua790', '\ua793'), ('\ua7a0', '\ua7aa'),
        ('\ua7f8', '\ua7f9'), ('\ua7fa', '\ua7fa'),
        ('\ua7fb', '\ua7ff'), ('\ufb00', '\ufb06'),
        ('\uff21', '\uff3a'), ('\uff41', '\uff5a')
    ];

    pub fn Latin(c: char) -> bool {
        super::bsearch_range_table(c, Latin_table)
    }

    static Lepcha_table : &'static [(char,char)] = &[
        ('\u1c00', '\u1c23'), ('\u1c24', '\u1c2b'),
        ('\u1c2c', '\u1c33'), ('\u1c34', '\u1c35'),
        ('\u1c36', '\u1c37'), ('\u1c3b', '\u1c3f'),
        ('\u1c40', '\u1c49'), ('\u1c4d', '\u1c4f')
    ];

    pub fn Lepcha(c: char) -> bool {
        super::bsearch_range_table(c, Lepcha_table)
    }

    static Limbu_table : &'static [(char,char)] = &[
        ('\u1900', '\u191c'), ('\u1920', '\u1922'),
        ('\u1923', '\u1926'), ('\u1927', '\u1928'),
        ('\u1929', '\u192b'), ('\u1930', '\u1931'),
        ('\u1932', '\u1932'), ('\u1933', '\u1938'),
        ('\u1939', '\u193b'), ('\u1940', '\u1940'),
        ('\u1944', '\u1945'), ('\u1946', '\u194f')
    ];

    pub fn Limbu(c: char) -> bool {
        super::bsearch_range_table(c, Limbu_table)
    }

    static Linear_B_table : &'static [(char,char)] = &[
        ('\U00010000', '\U0001000b'), ('\U0001000d', '\U00010026'),
        ('\U00010028', '\U0001003a'), ('\U0001003c', '\U0001003d'),
        ('\U0001003f', '\U0001004d'), ('\U00010050', '\U0001005d'),
        ('\U00010080', '\U000100fa')
    ];

    pub fn Linear_B(c: char) -> bool {
        super::bsearch_range_table(c, Linear_B_table)
    }

    static Lycian_table : &'static [(char,char)] = &[
        ('\U00010280', '\U0001029c')
    ];

    pub fn Lycian(c: char) -> bool {
        super::bsearch_range_table(c, Lycian_table)
    }

    static Lydian_table : &'static [(char,char)] = &[
        ('\U00010920', '\U00010939'), ('\U0001093f', '\U0001093f')
    ];

    pub fn Lydian(c: char) -> bool {
        super::bsearch_range_table(c, Lydian_table)
    }

    static Malayalam_table : &'static [(char,char)] = &[
        ('\u0d02', '\u0d03'), ('\u0d05', '\u0d0c'),
        ('\u0d0e', '\u0d10'), ('\u0d12', '\u0d3a'),
        ('\u0d3d', '\u0d3d'), ('\u0d3e', '\u0d40'),
        ('\u0d41', '\u0d44'), ('\u0d46', '\u0d48'),
        ('\u0d4a', '\u0d4c'), ('\u0d4d', '\u0d4d'),
        ('\u0d4e', '\u0d4e'), ('\u0d57', '\u0d57'),
        ('\u0d60', '\u0d61'), ('\u0d62', '\u0d63'),
        ('\u0d66', '\u0d6f'), ('\u0d70', '\u0d75'),
        ('\u0d79', '\u0d79'), ('\u0d7a', '\u0d7f')
    ];

    pub fn Malayalam(c: char) -> bool {
        super::bsearch_range_table(c, Malayalam_table)
    }

    static Mongolian_table : &'static [(char,char)] = &[
        ('\u1800', '\u1801'), ('\u1804', '\u1804'),
        ('\u1806', '\u1806'), ('\u1807', '\u180a'),
        ('\u180b', '\u180d'), ('\u180e', '\u180e'),
        ('\u1810', '\u1819'), ('\u1820', '\u1842'),
        ('\u1843', '\u1843'), ('\u1844', '\u1877'),
        ('\u1880', '\u18a8'), ('\u18a9', '\u18a9'),
        ('\u18aa', '\u18aa')
    ];

    pub fn Mongolian(c: char) -> bool {
        super::bsearch_range_table(c, Mongolian_table)
    }

    static Myanmar_table : &'static [(char,char)] = &[
        ('\u1000', '\u102a'), ('\u102b', '\u102c'),
        ('\u102d', '\u1030'), ('\u1031', '\u1031'),
        ('\u1032', '\u1037'), ('\u1038', '\u1038'),
        ('\u1039', '\u103a'), ('\u103b', '\u103c'),
        ('\u103d', '\u103e'), ('\u103f', '\u103f'),
        ('\u1040', '\u1049'), ('\u104a', '\u104f'),
        ('\u1050', '\u1055'), ('\u1056', '\u1057'),
        ('\u1058', '\u1059'), ('\u105a', '\u105d'),
        ('\u105e', '\u1060'), ('\u1061', '\u1061'),
        ('\u1062', '\u1064'), ('\u1065', '\u1066'),
        ('\u1067', '\u106d'), ('\u106e', '\u1070'),
        ('\u1071', '\u1074'), ('\u1075', '\u1081'),
        ('\u1082', '\u1082'), ('\u1083', '\u1084'),
        ('\u1085', '\u1086'), ('\u1087', '\u108c'),
        ('\u108d', '\u108d'), ('\u108e', '\u108e'),
        ('\u108f', '\u108f'), ('\u1090', '\u1099'),
        ('\u109a', '\u109c'), ('\u109d', '\u109d'),
        ('\u109e', '\u109f'), ('\uaa60', '\uaa6f'),
        ('\uaa70', '\uaa70'), ('\uaa71', '\uaa76'),
        ('\uaa77', '\uaa79'), ('\uaa7a', '\uaa7a'),
        ('\uaa7b', '\uaa7b')
    ];

    pub fn Myanmar(c: char) -> bool {
        super::bsearch_range_table(c, Myanmar_table)
    }

    static New_Tai_Lue_table : &'static [(char,char)] = &[
        ('\u1980', '\u19ab'), ('\u19b0', '\u19c0'),
        ('\u19c1', '\u19c7'), ('\u19c8', '\u19c9'),
        ('\u19d0', '\u19d9'), ('\u19da', '\u19da'),
        ('\u19de', '\u19df')
    ];

    pub fn New_Tai_Lue(c: char) -> bool {
        super::bsearch_range_table(c, New_Tai_Lue_table)
    }

    static Nko_table : &'static [(char,char)] = &[
        ('\u07c0', '\u07c9'), ('\u07ca', '\u07ea'),
        ('\u07eb', '\u07f3'), ('\u07f4', '\u07f5'),
        ('\u07f6', '\u07f6'), ('\u07f7', '\u07f9'),
        ('\u07fa', '\u07fa')
    ];

    pub fn Nko(c: char) -> bool {
        super::bsearch_range_table(c, Nko_table)
    }

    static Ogham_table : &'static [(char,char)] = &[
        ('\u1680', '\u1680'), ('\u1681', '\u169a'),
        ('\u169b', '\u169b'), ('\u169c', '\u169c')
    ];

    pub fn Ogham(c: char) -> bool {
        super::bsearch_range_table(c, Ogham_table)
    }

    static Ol_Chiki_table : &'static [(char,char)] = &[
        ('\u1c50', '\u1c59'), ('\u1c5a', '\u1c77'),
        ('\u1c78', '\u1c7d'), ('\u1c7e', '\u1c7f')
    ];

    pub fn Ol_Chiki(c: char) -> bool {
        super::bsearch_range_table(c, Ol_Chiki_table)
    }

    static Old_Italic_table : &'static [(char,char)] = &[
        ('\U00010300', '\U0001031e'), ('\U00010320', '\U00010323')
    ];

    pub fn Old_Italic(c: char) -> bool {
        super::bsearch_range_table(c, Old_Italic_table)
    }

    static Old_Persian_table : &'static [(char,char)] = &[
        ('\U000103a0', '\U000103c3'), ('\U000103c8', '\U000103cf'),
        ('\U000103d0', '\U000103d0'), ('\U000103d1', '\U000103d5')
    ];

    pub fn Old_Persian(c: char) -> bool {
        super::bsearch_range_table(c, Old_Persian_table)
    }

    static Oriya_table : &'static [(char,char)] = &[
        ('\u0b01', '\u0b01'), ('\u0b02', '\u0b03'),
        ('\u0b05', '\u0b0c'), ('\u0b0f', '\u0b10'),
        ('\u0b13', '\u0b28'), ('\u0b2a', '\u0b30'),
        ('\u0b32', '\u0b33'), ('\u0b35', '\u0b39'),
        ('\u0b3c', '\u0b3c'), ('\u0b3d', '\u0b3d'),
        ('\u0b3e', '\u0b3e'), ('\u0b3f', '\u0b3f'),
        ('\u0b40', '\u0b40'), ('\u0b41', '\u0b44'),
        ('\u0b47', '\u0b48'), ('\u0b4b', '\u0b4c'),
        ('\u0b4d', '\u0b4d'), ('\u0b56', '\u0b56'),
        ('\u0b57', '\u0b57'), ('\u0b5c', '\u0b5d'),
        ('\u0b5f', '\u0b61'), ('\u0b62', '\u0b63'),
        ('\u0b66', '\u0b6f'), ('\u0b70', '\u0b70'),
        ('\u0b71', '\u0b71'), ('\u0b72', '\u0b77')
    ];

    pub fn Oriya(c: char) -> bool {
        super::bsearch_range_table(c, Oriya_table)
    }

    static Osmanya_table : &'static [(char,char)] = &[
        ('\U00010480', '\U0001049d'), ('\U000104a0', '\U000104a9')
    ];

    pub fn Osmanya(c: char) -> bool {
        super::bsearch_range_table(c, Osmanya_table)
    }

    static Phags_Pa_table : &'static [(char,char)] = &[
        ('\ua840', '\ua873'), ('\ua874', '\ua877')
    ];

    pub fn Phags_Pa(c: char) -> bool {
        super::bsearch_range_table(c, Phags_Pa_table)
    }

    static Phoenician_table : &'static [(char,char)] = &[
        ('\U00010900', '\U00010915'), ('\U00010916', '\U0001091b'),
        ('\U0001091f', '\U0001091f')
    ];

    pub fn Phoenician(c: char) -> bool {
        super::bsearch_range_table(c, Phoenician_table)
    }

    static Rejang_table : &'static [(char,char)] = &[
        ('\ua930', '\ua946'), ('\ua947', '\ua951'),
        ('\ua952', '\ua953'), ('\ua95f', '\ua95f')
    ];

    pub fn Rejang(c: char) -> bool {
        super::bsearch_range_table(c, Rejang_table)
    }

    static Runic_table : &'static [(char,char)] = &[
        ('\u16a0', '\u16ea'), ('\u16ee', '\u16f0')
    ];

    pub fn Runic(c: char) -> bool {
        super::bsearch_range_table(c, Runic_table)
    }

    static Saurashtra_table : &'static [(char,char)] = &[
        ('\ua880', '\ua881'), ('\ua882', '\ua8b3'),
        ('\ua8b4', '\ua8c3'), ('\ua8c4', '\ua8c4'),
        ('\ua8ce', '\ua8cf'), ('\ua8d0', '\ua8d9')
    ];

    pub fn Saurashtra(c: char) -> bool {
        super::bsearch_range_table(c, Saurashtra_table)
    }

    static Shavian_table : &'static [(char,char)] = &[
        ('\U00010450', '\U0001047f')
    ];

    pub fn Shavian(c: char) -> bool {
        super::bsearch_range_table(c, Shavian_table)
    }

    static Sinhala_table : &'static [(char,char)] = &[
        ('\u0d82', '\u0d83'), ('\u0d85', '\u0d96'),
        ('\u0d9a', '\u0db1'), ('\u0db3', '\u0dbb'),
        ('\u0dbd', '\u0dbd'), ('\u0dc0', '\u0dc6'),
        ('\u0dca', '\u0dca'), ('\u0dcf', '\u0dd1'),
        ('\u0dd2', '\u0dd4'), ('\u0dd6', '\u0dd6'),
        ('\u0dd8', '\u0ddf'), ('\u0df2', '\u0df3'),
        ('\u0df4', '\u0df4')
    ];

    pub fn Sinhala(c: char) -> bool {
        super::bsearch_range_table(c, Sinhala_table)
    }

    static Sundanese_table : &'static [(char,char)] = &[
        ('\u1b80', '\u1b81'), ('\u1b82', '\u1b82'),
        ('\u1b83', '\u1ba0'), ('\u1ba1', '\u1ba1'),
        ('\u1ba2', '\u1ba5'), ('\u1ba6', '\u1ba7'),
        ('\u1ba8', '\u1ba9'), ('\u1baa', '\u1baa'),
        ('\u1bab', '\u1bab'), ('\u1bac', '\u1bad'),
        ('\u1bae', '\u1baf'), ('\u1bb0', '\u1bb9'),
        ('\u1bba', '\u1bbf'), ('\u1cc0', '\u1cc7')
    ];

    pub fn Sundanese(c: char) -> bool {
        super::bsearch_range_table(c, Sundanese_table)
    }

    static Syloti_Nagri_table : &'static [(char,char)] = &[
        ('\ua800', '\ua801'), ('\ua802', '\ua802'),
        ('\ua803', '\ua805'), ('\ua806', '\ua806'),
        ('\ua807', '\ua80a'), ('\ua80b', '\ua80b'),
        ('\ua80c', '\ua822'), ('\ua823', '\ua824'),
        ('\ua825', '\ua826'), ('\ua827', '\ua827'),
        ('\ua828', '\ua82b')
    ];

    pub fn Syloti_Nagri(c: char) -> bool {
        super::bsearch_range_table(c, Syloti_Nagri_table)
    }

    static Syriac_table : &'static [(char,char)] = &[
        ('\u0700', '\u070d'), ('\u070f', '\u070f'),
        ('\u0710', '\u0710'), ('\u0711', '\u0711'),
        ('\u0712', '\u072f'), ('\u0730', '\u074a'),
        ('\u074d', '\u074f')
    ];

    pub fn Syriac(c: char) -> bool {
        super::bsearch_range_table(c, Syriac_table)
    }

    static Tagalog_table : &'static [(char,char)] = &[
        ('\u1700', '\u170c'), ('\u170e', '\u1711'),
        ('\u1712', '\u1714')
    ];

    pub fn Tagalog(c: char) -> bool {
        super::bsearch_range_table(c, Tagalog_table)
    }

    static Tagbanwa_table : &'static [(char,char)] = &[
        ('\u1760', '\u176c'), ('\u176e', '\u1770'),
        ('\u1772', '\u1773')
    ];

    pub fn Tagbanwa(c: char) -> bool {
        super::bsearch_range_table(c, Tagbanwa_table)
    }

    static Tai_Le_table : &'static [(char,char)] = &[
        ('\u1950', '\u196d'), ('\u1970', '\u1974')
    ];

    pub fn Tai_Le(c: char) -> bool {
        super::bsearch_range_table(c, Tai_Le_table)
    }

    static Tamil_table : &'static [(char,char)] = &[
        ('\u0b82', '\u0b82'), ('\u0b83', '\u0b83'),
        ('\u0b85', '\u0b8a'), ('\u0b8e', '\u0b90'),
        ('\u0b92', '\u0b95'), ('\u0b99', '\u0b9a'),
        ('\u0b9c', '\u0b9c'), ('\u0b9e', '\u0b9f'),
        ('\u0ba3', '\u0ba4'), ('\u0ba8', '\u0baa'),
        ('\u0bae', '\u0bb9'), ('\u0bbe', '\u0bbf'),
        ('\u0bc0', '\u0bc0'), ('\u0bc1', '\u0bc2'),
        ('\u0bc6', '\u0bc8'), ('\u0bca', '\u0bcc'),
        ('\u0bcd', '\u0bcd'), ('\u0bd0', '\u0bd0'),
        ('\u0bd7', '\u0bd7'), ('\u0be6', '\u0bef'),
        ('\u0bf0', '\u0bf2'), ('\u0bf3', '\u0bf8'),
        ('\u0bf9', '\u0bf9'), ('\u0bfa', '\u0bfa')
    ];

    pub fn Tamil(c: char) -> bool {
        super::bsearch_range_table(c, Tamil_table)
    }

    static Telugu_table : &'static [(char,char)] = &[
        ('\u0c01', '\u0c03'), ('\u0c05', '\u0c0c'),
        ('\u0c0e', '\u0c10'), ('\u0c12', '\u0c28'),
        ('\u0c2a', '\u0c33'), ('\u0c35', '\u0c39'),
        ('\u0c3d', '\u0c3d'), ('\u0c3e', '\u0c40'),
        ('\u0c41', '\u0c44'), ('\u0c46', '\u0c48'),
        ('\u0c4a', '\u0c4d'), ('\u0c55', '\u0c56'),
        ('\u0c58', '\u0c59'), ('\u0c60', '\u0c61'),
        ('\u0c62', '\u0c63'), ('\u0c66', '\u0c6f'),
        ('\u0c78', '\u0c7e'), ('\u0c7f', '\u0c7f')
    ];

    pub fn Telugu(c: char) -> bool {
        super::bsearch_range_table(c, Telugu_table)
    }

    static Thaana_table : &'static [(char,char)] = &[
        ('\u0780', '\u07a5'), ('\u07a6', '\u07b0'),
        ('\u07b1', '\u07b1')
    ];

    pub fn Thaana(c: char) -> bool {
        super::bsearch_range_table(c, Thaana_table)
    }

    static Thai_table : &'static [(char,char)] = &[
        ('\u0e01', '\u0e30'), ('\u0e31', '\u0e31'),
        ('\u0e32', '\u0e33'), ('\u0e34', '\u0e3a'),
        ('\u0e40', '\u0e45'), ('\u0e46', '\u0e46'),
        ('\u0e47', '\u0e4e'), ('\u0e4f', '\u0e4f'),
        ('\u0e50', '\u0e59'), ('\u0e5a', '\u0e5b')
    ];

    pub fn Thai(c: char) -> bool {
        super::bsearch_range_table(c, Thai_table)
    }

    static Tibetan_table : &'static [(char,char)] = &[
        ('\u0f00', '\u0f00'), ('\u0f01', '\u0f03'),
        ('\u0f04', '\u0f12'), ('\u0f13', '\u0f13'),
        ('\u0f14', '\u0f14'), ('\u0f15', '\u0f17'),
        ('\u0f18', '\u0f19'), ('\u0f1a', '\u0f1f'),
        ('\u0f20', '\u0f29'), ('\u0f2a', '\u0f33'),
        ('\u0f34', '\u0f34'), ('\u0f35', '\u0f35'),
        ('\u0f36', '\u0f36'), ('\u0f37', '\u0f37'),
        ('\u0f38', '\u0f38'), ('\u0f39', '\u0f39'),
        ('\u0f3a', '\u0f3a'), ('\u0f3b', '\u0f3b'),
        ('\u0f3c', '\u0f3c'), ('\u0f3d', '\u0f3d'),
        ('\u0f3e', '\u0f3f'), ('\u0f40', '\u0f47'),
        ('\u0f49', '\u0f6c'), ('\u0f71', '\u0f7e'),
        ('\u0f7f', '\u0f7f'), ('\u0f80', '\u0f84'),
        ('\u0f85', '\u0f85'), ('\u0f86', '\u0f87'),
        ('\u0f88', '\u0f8c'), ('\u0f8d', '\u0f97'),
        ('\u0f99', '\u0fbc'), ('\u0fbe', '\u0fc5'),
        ('\u0fc6', '\u0fc6'), ('\u0fc7', '\u0fcc'),
        ('\u0fce', '\u0fcf'), ('\u0fd0', '\u0fd4'),
        ('\u0fd9', '\u0fda')
    ];

    pub fn Tibetan(c: char) -> bool {
        super::bsearch_range_table(c, Tibetan_table)
    }

    static Tifinagh_table : &'static [(char,char)] = &[
        ('\u2d30', '\u2d67'), ('\u2d6f', '\u2d6f'),
        ('\u2d70', '\u2d70'), ('\u2d7f', '\u2d7f')
    ];

    pub fn Tifinagh(c: char) -> bool {
        super::bsearch_range_table(c, Tifinagh_table)
    }

    static Ugaritic_table : &'static [(char,char)] = &[
        ('\U00010380', '\U0001039d'), ('\U0001039f', '\U0001039f')
    ];

    pub fn Ugaritic(c: char) -> bool {
        super::bsearch_range_table(c, Ugaritic_table)
    }

    static Vai_table : &'static [(char,char)] = &[
        ('\ua500', '\ua60b'), ('\ua60c', '\ua60c'),
        ('\ua60d', '\ua60f'), ('\ua610', '\ua61f'),
        ('\ua620', '\ua629'), ('\ua62a', '\ua62b')
    ];

    pub fn Vai(c: char) -> bool {
        super::bsearch_range_table(c, Vai_table)
    }

    static Yi_table : &'static [(char,char)] = &[
        ('\ua000', '\ua014'), ('\ua015', '\ua015'),
        ('\ua016', '\ua48c'), ('\ua490', '\ua4c6')
    ];

    pub fn Yi(c: char) -> bool {
        super::bsearch_range_table(c, Yi_table)
    }

}
